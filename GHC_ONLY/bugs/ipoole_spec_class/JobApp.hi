{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface JobApp where
import JobImp(E)
import PreludeIO(Request, Response)
infixl 0 ##=
infixl 0 >>
infixl 1 >>=
infixl 0 >>>
infixl 1 >>>=
infixr 0 ?
type SJob a b c d = ((b, a), [Char]) -> ((E d, ((c, a), [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
type STask a b c = ((b, a), [Char]) -> ((E (), ((c, a), [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
type Task a b = (a, [Char]) -> ((E (), (b, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
(##=) :: ((a, [Char]) -> ((E b, (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]) -> ((a, [Char]) -> ((E c, (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]) -> (a, [Char]) -> ((E (b, c), (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 3 _U_ 22122 _N_ _S_ "SL" _N_ _N_ #-}
(>>) :: ((b, [Char]) -> ((E a, (c, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]) -> ((c, [Char]) -> ((E d, (c, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]) -> (b, [Char]) -> ((E d, (c, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 3 _U_ 22122 _N_ _S_ "SL" _N_ _N_ #-}
(>>=) :: ((b, [Char]) -> ((E a, (d, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]) -> (a -> (d, [Char]) -> ((E c, (d, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]) -> (b, [Char]) -> ((E c, (d, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 3 _U_ 22122 _N_ _S_ "SLU(LL)" {_A_ 4 _U_ 222222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
(>>>) :: ((c, [Char]) -> ((E a, (b, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]) -> ((b, [Char]) -> ((E e, (d, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]) -> (c, [Char]) -> ((E e, (d, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 3 _U_ 12222 _N_ _N_ _N_ _N_ #-}
(>>>=) :: ((c, [Char]) -> ((E a, (b, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]) -> (a -> (b, [Char]) -> ((E d, (e, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]) -> (c, [Char]) -> ((E d, (e, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 3 _U_ 12222 _N_ _N_ _F_ _IF_ARGS_ 5 0 X 1 _/\_ u0 u1 u2 u3 u4 -> _TYAPP_  _TYAPP_  _TYAPP_  _TYAPP_  _TYAPP_  _ORIG_ JobImp bindJob { u0 } { u1 } { u2 } { u4 } { u3 } _N_ #-}
(?) :: ((a, [Char]) -> ((E b, (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]) -> ((a, [Char]) -> ((E b, (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]) -> (a, [Char]) -> ((E b, (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 3 _U_ 12222 _N_ _S_ "SLL" _N_ _N_ #-}
appendChanJ :: [Char] -> [Char] -> (a, [Char]) -> ((E (), (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 2 _U_ 22122 _N_ _N_ _N_ _N_ #-}
appendFileJ :: [Char] -> [Char] -> (a, [Char]) -> ((E (), (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 2 _U_ 22122 _N_ _N_ _N_ _N_ #-}
applyToState :: (a -> b) -> (a, [Char]) -> ((E (), (b, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 2 _U_ 2222 _N_ _N_ _N_ _N_ #-}
applyToTopState :: (b -> c) -> ((b, a), [Char]) -> ((E (), ((c, a), [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 2 _U_ 2222 _N_ _N_ _N_ _N_ #-}
askFor :: [Char] -> (a, [Char]) -> ((E [Char], (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 1 _U_ 2122 _N_ _N_ _N_ _N_ #-}
clearScreen :: (a, [Char]) -> ((E (), (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 0 _U_ 122 _N_ _N_ _N_ _N_ #-}
foldT :: [(a, [Char]) -> ((E (), (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]] -> (a, [Char]) -> ((E (), (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 1 _U_ 1222 _N_ _S_ "S" _N_ _N_ #-}
gather :: ((a, [Char]) -> ((E b, (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]) -> (b -> Bool) -> (a, [Char]) -> ((E [b], (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 3 _U_ 22122 _N_ _S_ "SL" _N_ _N_ #-}
getArgsJ :: (a, [Char]) -> ((E [[Char]], (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 1 _U_ 122 _N_ _N_ _N_ _N_ #-}
getEnvJ :: [Char] -> (a, [Char]) -> ((E [Char], (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 1 _U_ 2122 _N_ _N_ _N_ _N_ #-}
getInt :: (a, [Char]) -> ((E Int, (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 1 _U_ 122 _N_ _N_ _N_ _N_ #-}
getLine :: (a, [Char]) -> ((E [Char], (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 1 _U_ 122 _N_ _N_ _N_ _N_ #-}
getProgNameJ :: (a, [Char]) -> ((E [Char], (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 1 _U_ 122 _N_ _N_ _N_ _N_ #-}
getTopState :: ((b, a), [Char]) -> ((E b, ((b, a), [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 1 _U_ 222 _N_ _N_ _N_ _N_ #-}
getWord :: (a, [Char]) -> ((E [Char], (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 1 _U_ 122 _N_ _N_ _N_ _N_ #-}
greet_ :: ((b, a), [Char]) -> ((E (), ((b, a), [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 1 _U_ 222 _N_ _N_ _N_ _N_ #-}
greetme_ :: (([Char], a), [Char]) -> ((E (), (([Char], a), [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 1 _U_ 122 _N_ _N_ _N_ _N_ #-}
popState :: ((b, a), [Char]) -> ((E b, (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 1 _U_ 222 _N_ _N_ _N_ _N_ #-}
pushState :: a -> (b, [Char]) -> ((E (), ((a, b), [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 2 _U_ 2222 _N_ _N_ _N_ _N_ #-}
putChar :: Char -> (a, [Char]) -> ((E (), (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 1 _U_ 2122 _N_ _N_ _N_ _N_ #-}
putInt :: Int -> (a, [Char]) -> ((E (), (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 1 _U_ 1122 _N_ _N_ _N_ _N_ #-}
putLine :: [Char] -> (a, [Char]) -> ((E (), (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 1 _U_ 2122 _N_ _N_ _N_ _N_ #-}
putStr :: [Char] -> (a, [Char]) -> ((E (), (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 1 _U_ 2122 _N_ _N_ _F_ _IF_ARGS_ 1 0 X 2 _/\_ u0 -> _APP_  _TYAPP_  _ORIG_ JobApp appendChanJ { u0 } [ _ORIG_ PreludeIO stdout ] _N_ #-}
putStrStderr :: [Char] -> (a, [Char]) -> ((E (), (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 1 _U_ 2122 _N_ _N_ _F_ _IF_ARGS_ 1 0 X 2 _/\_ u0 -> _APP_  _TYAPP_  _ORIG_ JobApp appendChanJ { u0 } [ _ORIG_ PreludeIO stderr ] _N_ #-}
readChanJ :: [Char] -> (a, [Char]) -> ((E [Char], (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 1 _U_ 2122 _N_ _N_ _N_ _N_ #-}
readFileJ :: [Char] -> (a, [Char]) -> ((E [Char], (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 1 _U_ 2122 _N_ _N_ _N_ _N_ #-}
setTopState :: b -> ((a, c), [Char]) -> ((E (), ((b, c), [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 2 _U_ 2222 _N_ _N_ _N_ _N_ #-}
val :: a -> (b, [Char]) -> ((E a, (b, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 3 _U_ 2212 _N_ _N_ _F_ _IF_ARGS_ 2 0 X 1 _/\_ u0 u1 -> _TYAPP_  _TYAPP_  _ORIG_ JobImp unitJob { u1 } { u0 } _N_ #-}
while :: (b -> Bool) -> (b -> (a, [Char]) -> ((E b, (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]) -> b -> (a, [Char]) -> ((E b, (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 3 _U_ 222222 _N_ _S_ "SLL" _N_ _N_ #-}
writeFileJ :: [Char] -> [Char] -> (a, [Char]) -> ((E (), (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 2 _U_ 22122 _N_ _N_ _N_ _N_ #-}
zeroT :: (a, [Char]) -> ((E (), (a, [Char])) -> [Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 2 _U_ 212 _N_ _S_ "LS" _N_ _N_ #-}

