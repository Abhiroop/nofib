{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface InterpUtils where
import DataTypes(Board, Colour, Piece, PlayMove)
import GenUtils(Maybe)
allValidMoves :: Board -> Piece -> (Int -> Bool) -> [PlayMove]
	{-# GHC_PRAGMA _A_ 3 _U_ 122 _N_ _S_ "U(U(U(SS)P)U(LL)L)LL" {_A_ 5 _U_ 22222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
createShortMove :: PlayMove -> [Char] -> Board -> [Char]
	{-# GHC_PRAGMA _A_ 3 _U_ 122 _N_ _S_ "U(ELLL)LL" _N_ _N_ #-}
disAmb :: (Text b, Eq a, Text a) => (Int, Int) -> [(a, b)] -> [Char]
	{-# GHC_PRAGMA _A_ 3 _U_ 21212 _N_ _N_ _N_ _SPECIALISE_ [ Int, Int ] 3 { _A_ 0 _U_ 12 _N_ _N_ _N_ _N_ } #-}
findAMove :: Piece -> (Maybe Int, Maybe Int) -> (Maybe Int, Maybe Int) -> Board -> ([Char], Board)
	{-# GHC_PRAGMA _A_ 4 _U_ 2222 _N_ _S_ "LLLU(LLL)" _N_ _N_ #-}
findAPawnMove :: (Maybe Int, Maybe Int) -> (Maybe Int, Maybe Int) -> Maybe Piece -> Board -> ([Char], Board)
	{-# GHC_PRAGMA _A_ 0 _U_ 1222 _N_ _N_ _N_ _N_ #-}
findCastleKMove :: Board -> ([Char], Board)
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _N_ _N_ _N_ #-}
findCastleQMove :: Board -> ([Char], Board)
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _N_ _N_ _N_ #-}
getAllMovesFor :: Board -> (Piece, Int, Int) -> [PlayMove]
	{-# GHC_PRAGMA _A_ 0 _U_ 21 _N_ _N_ _N_ _N_ #-}
getCurrPieces :: Board -> Piece -> (Int -> Bool) -> [(Piece, Int, Int)]
	{-# GHC_PRAGMA _A_ 3 _U_ 122 _N_ _S_ "U(U(U(SS)P)U(AL)A)LL" {_A_ 5 _U_ 12222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
getEPEnd :: Colour -> Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "E" _F_ _IF_ARGS_ 0 1 C 6 \ (u0 :: Colour) -> case u0 of { _ALG_ _ORIG_ DataTypes White  -> _!_ I# [] [6#]; _ORIG_ DataTypes Black  -> _!_ I# [] [3#]; _NO_DEFLT_ } _N_ #-}
getEPStart :: Colour -> Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "E" _F_ _IF_ARGS_ 0 1 C 6 \ (u0 :: Colour) -> case u0 of { _ALG_ _ORIG_ DataTypes White  -> _!_ I# [] [5#]; _ORIG_ DataTypes Black  -> _!_ I# [] [4#]; _NO_DEFLT_ } _N_ #-}
getHomeRank :: Colour -> Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "E" _F_ _IF_ARGS_ 0 1 C 6 \ (u0 :: Colour) -> case u0 of { _ALG_ _ORIG_ DataTypes White  -> _!_ I# [] [1#]; _ORIG_ DataTypes Black  -> _!_ I# [] [8#]; _NO_DEFLT_ } _N_ #-}
makeACastleK :: Board -> Board
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(LU(LE)A)" {_A_ 3 _U_ 122 _N_ _N_ _N_ _N_} _N_ _N_ #-}
makeACastleQ :: Board -> Board
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(LU(LE)A)" {_A_ 3 _U_ 122 _N_ _N_ _N_ _N_} _N_ _N_ #-}
makeAMove :: Board -> PlayMove -> Board
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(LU(LL)A)U(LLLS)" {_A_ 4 _U_ 1221 _N_ _N_ _N_ _N_} _N_ _N_ #-}
movePiece :: Int -> Int -> Board -> Int -> Int -> [(Int, Int)]
	{-# GHC_PRAGMA _A_ 5 _U_ 12211 _N_ _S_ "U(P)LU(LLL)U(P)L" {_A_ 5 _U_ 22221 _N_ _N_ _N_ _N_} _N_ _N_ #-}

