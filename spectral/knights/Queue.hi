{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Queue where
type Queue a = [a]
addAllBack :: [a] -> [a] -> [a]
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "LS" _F_ _IF_ARGS_ 1 2 XX 3 _/\_ u0 -> \ (u1 :: [u0]) (u2 :: [u0]) -> _APP_  _TYAPP_  _ORIG_ PreludeList (++) { u0 } [ u2, u1 ] _N_ #-}
addAllFront :: [a] -> [a] -> [a]
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludeList (++) _N_ #-}
addBack :: a -> [a] -> [a]
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "LS" _N_ _N_ #-}
addFront :: a -> [a] -> [a]
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 1 2 XX 3 _/\_ u0 -> \ (u1 :: u0) (u2 :: [u0]) -> _!_ (:) [u0] [u1, u2] _N_ #-}
createQueue :: [a]
	{-# GHC_PRAGMA _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 1 0 X 1 _/\_ u0 -> _!_ _NIL_ [u0] [] _N_ #-}
emptyQueue :: Eq a => [a] -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 22 _N_ _N_ _N_ _N_ #-}
inquireBack :: [a] -> a
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
inquireFront :: [a] -> a
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _F_ _IF_ARGS_ 1 1 C 5 _/\_ u0 -> \ (u1 :: [u0]) -> case u1 of { _ALG_ _NIL_  -> _APP_  _TYAPP_  error { u0 } [ _NOREP_S_ "Cannot inquire on empty Queue" ]; (:) (u2 :: u0) (u3 :: [u0]) -> u2; _NO_DEFLT_ } _N_ #-}
removeBack :: [a] -> [a]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
removeFront :: [a] -> [a]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _F_ _IF_ARGS_ 1 1 C 5 _/\_ u0 -> \ (u1 :: [u0]) -> case u1 of { _ALG_ _NIL_  -> _APP_  _TYAPP_  error { [u0] } [ _NOREP_S_ "Cannot remove from an empty Queue" ]; (:) (u2 :: u0) (u3 :: [u0]) -> u3; _NO_DEFLT_ } _N_ #-}

