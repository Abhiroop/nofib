{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Mandel where
import PortablePixmap(PixMap)
import PreludeComplex(Complex)
diverge :: Complex Double -> Double -> Bool
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(LL)U(P)" {_A_ 3 _U_ 222 _N_ _N_ _F_ _IF_ARGS_ 0 3 XXX 5 \ (u0 :: Double) (u1 :: Double) (u2 :: Double#) -> case _APP_  _WRKR_ _SPEC_ _ORIG_ PreludeComplex magnitude [ (Double) ] [ u0, u1 ] of { _ALG_ D# (u3 :: Double#) -> _#_ gtDouble# [] [u3, u2]; _NO_DEFLT_ } _N_} _F_ _IF_ARGS_ 0 2 CC 7 \ (u0 :: Complex Double) (u1 :: Double) -> case u0 of { _ALG_ (:+) (u2 :: Double) (u3 :: Double) -> case _APP_  _WRKR_ _SPEC_ _ORIG_ PreludeComplex magnitude [ (Double) ] [ u2, u3 ] of { _ALG_ D# (u4 :: Double#) -> case u1 of { _ALG_ D# (u5 :: Double#) -> _#_ gtDouble# [] [u4, u5]; _NO_DEFLT_ }; _NO_DEFLT_ }; _NO_DEFLT_ } _N_ #-}
mandel :: Num a => a -> [a]
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _N_ _SPECIALISE_ [ (Complex Double) ] 1 { _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ } #-}
mandelset :: Double -> Double -> Double -> Double -> Integer -> Integer -> Int -> PixMap
	{-# GHC_PRAGMA _A_ 7 _U_ 2222222 _N_ _N_ _N_ _N_ #-}
parallelMandel :: [Complex Double] -> Int -> Double -> [Int]
	{-# GHC_PRAGMA _A_ 3 _U_ 122 _N_ _S_ "SLL" _N_ _N_ #-}
whenDiverge :: Int -> Double -> Complex Double -> Int
	{-# GHC_PRAGMA _A_ 3 _U_ 122 _N_ _S_ "U(P)LL" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}

