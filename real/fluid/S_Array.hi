{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface S_Array where
import Norm(Normal)
import PreludeArray(Assoc)
infixl 9 !^
infixl 9 //^
data S_array a 
(!^) :: S_array a -> Int -> a
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(U(U(P)U(P))LLS)U(P)" {_A_ 5 _U_ 11122 _N_ _N_ _N_ _N_} _N_ _N_ #-}
(//^) :: Eq a => S_array a -> [Assoc Int a] -> S_array a
	{-# GHC_PRAGMA _A_ 3 _U_ 112 _N_ _S_ "LU(U(LL)LSL)S" _N_ _N_ #-}
s_accum :: Eq b => (b -> a -> b) -> S_array b -> [Assoc Int a] -> S_array b
	{-# GHC_PRAGMA _A_ 4 _U_ 1212 _N_ _N_ _N_ _N_ #-}
s_accumArray :: Eq b => (b -> a -> b) -> b -> (Int, Int) -> [Assoc Int a] -> S_array b
	{-# GHC_PRAGMA _A_ 1 _U_ 12222 _N_ _N_ _N_ _N_ #-}
s_amap :: (a -> a) -> S_array a -> S_array a
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "LU(LLLL)" {_A_ 5 _U_ 22211 _N_ _N_ _N_ _N_} _N_ _N_ #-}
s_array :: (Int, Int) -> [Assoc Int a] -> S_array a
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _S_ "U(LL)S" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
s_assocs :: S_array a -> [Assoc Int a]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(U(U(P)U(P))LLL)" {_A_ 5 _U_ 22111 _N_ _N_ _N_ _N_} _N_ _N_ #-}
s_bounds :: S_array a -> (Int, Int)
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(U(LL)AAA)" {_A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 1 2 XX 3 _/\_ u0 -> \ (u1 :: Int) (u2 :: Int) -> _!_ _TUP_2 [Int, Int] [u1, u2] _N_} _N_ _N_ #-}
s_def_array :: Eq a => (Int, Int) -> a -> [Assoc Int a] -> S_array a
	{-# GHC_PRAGMA _A_ 4 _U_ 1122 _N_ _S_ "LU(LL)LS" {_A_ 5 _U_ 12222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
s_def_listArray :: Eq a => (Int, Int) -> a -> [a] -> S_array a
	{-# GHC_PRAGMA _A_ 4 _U_ 1222 _N_ _N_ _N_ _N_ #-}
s_elems :: S_array a -> [a]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(LLLS)" {_A_ 4 _U_ 1111 _N_ _N_ _N_ _N_} _N_ _N_ #-}
s_indices :: S_array a -> [Int]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(U(U(P)U(P))AAA)" {_A_ 2 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_ #-}
s_ixmap :: (Int, Int) -> (Int -> Int) -> S_array a -> S_array a
	{-# GHC_PRAGMA _A_ 3 _U_ 221 _N_ _S_ "LLU(U(LA)LLL)" _N_ _N_ #-}
s_listArray :: (Int, Int) -> [a] -> S_array a
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _N_ _N_ #-}
sparse_assocs :: S_array a -> [Assoc Int a]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(U(LA)LAS)" {_A_ 3 _U_ 211 _N_ _N_ _N_ _N_} _N_ _N_ #-}
instance Eq a => Eq (S_array a)
	{-# GHC_PRAGMA _M_ S_Array {-dfun-} _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ #-}
instance Normal a => Normal (S_array a)
	{-# GHC_PRAGMA _M_ S_Array {-dfun-} _A_ 2 _U_ 2 _N_ _S_ "LS" _N_ _N_ #-}
instance Text a => Text (S_array a)
	{-# GHC_PRAGMA _M_ S_Array {-dfun-} _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}

