{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Activity where
import GRIP(PElement)
import Parse(Parse)
data Activity   = REDN | IDLE | FLUSH | GC
activityGraph :: [Activity] -> [PElement] -> [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 3 _U_ 222 _N_ _N_ _N_ _N_ #-}
instance Eq Activity
	{-# GHC_PRAGMA _M_ Activity {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 3 _!_ _TUP_2 [(Activity -> Activity -> Bool), (Activity -> Activity -> Bool)] [_CONSTM_ Eq (==) (Activity), _CONSTM_ Eq (/=) (Activity)] _N_
	 (==) = _A_ 2 _U_ 11 _N_ _S_ "EE" _N_ _N_,
	 (/=) = _A_ 2 _U_ 11 _N_ _S_ "EE" _N_ _N_ #-}
instance Parse Activity
	{-# GHC_PRAGMA _M_ Activity {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 6 _!_ _TUP_5 [([Char] -> [Activity]), ([Char] -> Activity), ([Char] -> (Activity, [Char])), ([Char] -> (Activity, [Char])), (Activity -> Bool)] [_CONSTM_ Parse parseFile (Activity), _CONSTM_ Parse parseLine (Activity), _CONSTM_ Parse parse (Activity), _CONSTM_ Parse parseType (Activity), _CONSTM_ Parse forced (Activity)] _N_
	 parseFile = _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_,
	 parseLine = _A_ 1 _U_ 2 _N_ _N_ _N_ _N_,
	 parse = _A_ 1 _U_ 2 _N_ _N_ _N_ _N_,
	 parseType = _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_,
	 forced = _A_ 1 _U_ 0 _N_ _S_ "A" {_A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _!_ True [] [] _N_} _F_ _IF_ARGS_ 0 1 X 1 \ (u0 :: Activity) -> _!_ True [] [] _N_ #-}

