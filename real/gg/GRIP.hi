{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface GRIP where
import Parse(Parse)
data Activities   = Act Int Int Int Int Int Int
data Line   = Ln PElement Activities Sparks | PEs PElement | BucketFull Int | Null
data PElement   = PE [Char] Int
data Sparks   = Sp Int Int Int Int Int
accumulate :: (c -> a -> (b, c)) -> c -> [a] -> ([b], c)
	{-# GHC_PRAGMA _A_ 3 _U_ 221 _N_ _N_ _N_ _N_ #-}
aux :: (PElement -> Bool) -> [Line] -> [Activities]
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "LS" _N_ _N_ #-}
aux' :: (PElement -> Bool) -> [Line] -> [Sparks]
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "LS" _N_ _N_ #-}
created :: Sparks -> Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(AU(P)AAA)" {_A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 1 X 2 \ (u0 :: Int#) -> _!_ I# [] [u0] _N_} _F_ _IF_ARGS_ 0 1 C 2 \ (u0 :: Sparks) -> case u0 of { _ALG_ _ORIG_ GRIP Sp (u1 :: Int) (u2 :: Int) (u3 :: Int) (u4 :: Int) (u5 :: Int) -> u2; _NO_DEFLT_ } _N_ #-}
flush :: Activities -> Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(AAAAU(P)A)" {_A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 1 X 2 \ (u0 :: Int#) -> _!_ I# [] [u0] _N_} _F_ _IF_ARGS_ 0 1 C 2 \ (u0 :: Activities) -> case u0 of { _ALG_ _ORIG_ GRIP Act (u1 :: Int) (u2 :: Int) (u3 :: Int) (u4 :: Int) (u5 :: Int) (u6 :: Int) -> u5; _NO_DEFLT_ } _N_ #-}
gc :: Activities -> Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(AAAU(P)AA)" {_A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 1 X 2 \ (u0 :: Int#) -> _!_ I# [] [u0] _N_} _F_ _IF_ARGS_ 0 1 C 2 \ (u0 :: Activities) -> case u0 of { _ALG_ _ORIG_ GRIP Act (u1 :: Int) (u2 :: Int) (u3 :: Int) (u4 :: Int) (u5 :: Int) (u6 :: Int) -> u4; _NO_DEFLT_ } _N_ #-}
getAct :: [PElement] -> [Line] -> [Activities]
	{-# GHC_PRAGMA _A_ 1 _U_ 12 _N_ _S_ "S" _N_ _N_ #-}
getParameters :: [Line] -> ([PElement], Int, [Line])
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _N_ _N_ _N_ #-}
getSp :: [PElement] -> [Line] -> [Sparks]
	{-# GHC_PRAGMA _A_ 1 _U_ 12 _N_ _S_ "S" _N_ _N_ #-}
idle :: Activities -> Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(AU(P)AAAA)" {_A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 1 X 2 \ (u0 :: Int#) -> _!_ I# [] [u0] _N_} _F_ _IF_ARGS_ 0 1 C 2 \ (u0 :: Activities) -> case u0 of { _ALG_ _ORIG_ GRIP Act (u1 :: Int) (u2 :: Int) (u3 :: Int) (u4 :: Int) (u5 :: Int) (u6 :: Int) -> u2; _NO_DEFLT_ } _N_ #-}
lost :: Sparks -> Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(AAAAU(P))" {_A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 1 X 2 \ (u0 :: Int#) -> _!_ I# [] [u0] _N_} _F_ _IF_ARGS_ 0 1 C 2 \ (u0 :: Sparks) -> case u0 of { _ALG_ _ORIG_ GRIP Sp (u1 :: Int) (u2 :: Int) (u3 :: Int) (u4 :: Int) (u5 :: Int) -> u5; _NO_DEFLT_ } _N_ #-}
numberAct :: Activities -> Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(U(P)AAAAA)" {_A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 1 X 2 \ (u0 :: Int#) -> _!_ I# [] [u0] _N_} _F_ _IF_ARGS_ 0 1 C 2 \ (u0 :: Activities) -> case u0 of { _ALG_ _ORIG_ GRIP Act (u1 :: Int) (u2 :: Int) (u3 :: Int) (u4 :: Int) (u5 :: Int) (u6 :: Int) -> u1; _NO_DEFLT_ } _N_ #-}
numberSp :: Sparks -> Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(U(P)AAAA)" {_A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 1 X 2 \ (u0 :: Int#) -> _!_ I# [] [u0] _N_} _F_ _IF_ARGS_ 0 1 C 2 \ (u0 :: Sparks) -> case u0 of { _ALG_ _ORIG_ GRIP Sp (u1 :: Int) (u2 :: Int) (u3 :: Int) (u4 :: Int) (u5 :: Int) -> u1; _NO_DEFLT_ } _N_ #-}
reduction :: Activities -> Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(AAU(P)AAA)" {_A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 1 X 2 \ (u0 :: Int#) -> _!_ I# [] [u0] _N_} _F_ _IF_ARGS_ 0 1 C 2 \ (u0 :: Activities) -> case u0 of { _ALG_ _ORIG_ GRIP Act (u1 :: Int) (u2 :: Int) (u3 :: Int) (u4 :: Int) (u5 :: Int) (u6 :: Int) -> u3; _NO_DEFLT_ } _N_ #-}
resumed :: Sparks -> Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(AAAU(P)A)" {_A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 1 X 2 \ (u0 :: Int#) -> _!_ I# [] [u0] _N_} _F_ _IF_ARGS_ 0 1 C 2 \ (u0 :: Sparks) -> case u0 of { _ALG_ _ORIG_ GRIP Sp (u1 :: Int) (u2 :: Int) (u3 :: Int) (u4 :: Int) (u5 :: Int) -> u4; _NO_DEFLT_ } _N_ #-}
scaleAct :: Int -> Activities -> Activities
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(P)U(LLLLLU(P))" {_A_ 2 _U_ 21 _N_ _N_ _N_ _N_} _N_ _N_ #-}
total :: Activities -> Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(AAAAAU(P))" {_A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 1 X 2 \ (u0 :: Int#) -> _!_ I# [] [u0] _N_} _F_ _IF_ARGS_ 0 1 C 2 \ (u0 :: Activities) -> case u0 of { _ALG_ _ORIG_ GRIP Act (u1 :: Int) (u2 :: Int) (u3 :: Int) (u4 :: Int) (u5 :: Int) (u6 :: Int) -> u6; _NO_DEFLT_ } _N_ #-}
used :: Sparks -> Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(AAU(P)AA)" {_A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 1 X 2 \ (u0 :: Int#) -> _!_ I# [] [u0] _N_} _F_ _IF_ARGS_ 0 1 C 2 \ (u0 :: Sparks) -> case u0 of { _ALG_ _ORIG_ GRIP Sp (u1 :: Int) (u2 :: Int) (u3 :: Int) (u4 :: Int) (u5 :: Int) -> u3; _NO_DEFLT_ } _N_ #-}
instance Eq Activities
	{-# GHC_PRAGMA _M_ GRIP {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 3 _!_ _TUP_2 [(Activities -> Activities -> Bool), (Activities -> Activities -> Bool)] [_CONSTM_ Eq (==) (Activities), _CONSTM_ Eq (/=) (Activities)] _N_
	 (==) = _A_ 2 _U_ 11 _N_ _S_ "U(U(P)LLLLL)U(U(P)LLLLL)" _N_ _N_,
	 (/=) = _A_ 2 _U_ 11 _N_ _S_ "U(U(P)LLLLL)U(U(P)LLLLL)" _N_ _N_ #-}
instance Eq Line
	{-# GHC_PRAGMA _M_ GRIP {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 3 _!_ _TUP_2 [(Line -> Line -> Bool), (Line -> Line -> Bool)] [_CONSTM_ Eq (==) (Line), _CONSTM_ Eq (/=) (Line)] _N_
	 (==) = _A_ 2 _U_ 22 _N_ _S_ "SS" _N_ _N_,
	 (/=) = _A_ 2 _U_ 22 _N_ _S_ "SS" _N_ _N_ #-}
instance Eq PElement
	{-# GHC_PRAGMA _M_ GRIP {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 3 _!_ _TUP_2 [(PElement -> PElement -> Bool), (PElement -> PElement -> Bool)] [_CONSTM_ Eq (==) (PElement), _CONSTM_ Eq (/=) (PElement)] _N_
	 (==) = _A_ 2 _U_ 11 _N_ _S_ "U(SL)U(SL)" {_A_ 4 _U_ 2121 _N_ _N_ _F_ _IF_ARGS_ 0 4 XCXC 9 \ (u0 :: [Char]) (u1 :: Int) (u2 :: [Char]) (u3 :: Int) -> case _APP_  _CONSTM_ Eq (==) ([Char]) [ u0, u2 ] of { _ALG_ True  -> case u1 of { _ALG_ I# (u4 :: Int#) -> case u3 of { _ALG_ I# (u5 :: Int#) -> _#_ eqInt# [] [u4, u5]; _NO_DEFLT_ }; _NO_DEFLT_ }; False  -> _!_ False [] []; _NO_DEFLT_ } _N_} _N_ _N_,
	 (/=) = _A_ 2 _U_ 11 _N_ _S_ "U(SL)U(SL)" {_A_ 4 _U_ 2121 _N_ _N_ _N_ _N_} _N_ _N_ #-}
instance Eq Sparks
	{-# GHC_PRAGMA _M_ GRIP {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 3 _!_ _TUP_2 [(Sparks -> Sparks -> Bool), (Sparks -> Sparks -> Bool)] [_CONSTM_ Eq (==) (Sparks), _CONSTM_ Eq (/=) (Sparks)] _N_
	 (==) = _A_ 2 _U_ 11 _N_ _S_ "U(U(P)LLLL)U(U(P)LLLL)" _N_ _N_,
	 (/=) = _A_ 2 _U_ 11 _N_ _S_ "U(U(P)LLLL)U(U(P)LLLL)" _N_ _N_ #-}
instance Ord Line
	{-# GHC_PRAGMA _M_ GRIP {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 9 _!_ _TUP_8 [{{Eq Line}}, (Line -> Line -> Bool), (Line -> Line -> Bool), (Line -> Line -> Bool), (Line -> Line -> Bool), (Line -> Line -> Line), (Line -> Line -> Line), (Line -> Line -> _CMP_TAG)] [_DFUN_ Eq (Line), _CONSTM_ Ord (<) (Line), _CONSTM_ Ord (<=) (Line), _CONSTM_ Ord (>=) (Line), _CONSTM_ Ord (>) (Line), _CONSTM_ Ord max (Line), _CONSTM_ Ord min (Line), _CONSTM_ Ord _tagCmp (Line)] _N_
	 (<) = _A_ 2 _U_ 22 _N_ _N_ _N_ _N_,
	 (<=) = _A_ 2 _U_ 11 _N_ _S_ "SS" _N_ _N_,
	 (>=) = _A_ 2 _U_ 11 _N_ _S_ "SS" _F_ _IF_ARGS_ 0 2 XX 3 \ (u0 :: Line) (u1 :: Line) -> _APP_  _CONSTM_ Ord (<=) (Line) [ u1, u0 ] _N_,
	 (>) = _A_ 2 _U_ 22 _N_ _N_ _N_ _N_,
	 max = _A_ 2 _U_ 22 _N_ _N_ _N_ _N_,
	 min = _A_ 2 _U_ 22 _N_ _N_ _N_ _N_,
	 _tagCmp = _A_ 2 _U_ 22 _N_ _N_ _N_ _N_ #-}
instance Parse Line
	{-# GHC_PRAGMA _M_ GRIP {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 6 _!_ _TUP_5 [([Char] -> [Line]), ([Char] -> Line), ([Char] -> (Line, [Char])), ([Char] -> (Line, [Char])), (Line -> Bool)] [_CONSTM_ Parse parseFile (Line), _CONSTM_ Parse parseLine (Line), _CONSTM_ Parse parse (Line), _CONSTM_ Parse parseType (Line), _CONSTM_ Parse forced (Line)] _N_
	 parseFile = _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_,
	 parseLine = _A_ 1 _U_ 2 _N_ _N_ _N_ _N_,
	 parse = _A_ 1 _U_ 2 _N_ _N_ _N_ _N_,
	 parseType = _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_,
	 forced = _A_ 1 _U_ 0 _N_ _S_ "A" {_A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _!_ True [] [] _N_} _F_ _IF_ARGS_ 0 1 X 1 \ (u0 :: Line) -> _!_ True [] [] _N_ #-}
instance Parse PElement
	{-# GHC_PRAGMA _M_ GRIP {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 6 _!_ _TUP_5 [([Char] -> [PElement]), ([Char] -> PElement), ([Char] -> (PElement, [Char])), ([Char] -> (PElement, [Char])), (PElement -> Bool)] [_CONSTM_ Parse parseFile (PElement), _CONSTM_ Parse parseLine (PElement), _CONSTM_ Parse parse (PElement), _CONSTM_ Parse parseType (PElement), _CONSTM_ Parse forced (PElement)] _N_
	 parseFile = _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_,
	 parseLine = _A_ 1 _U_ 2 _N_ _N_ _N_ _N_,
	 parse = _A_ 1 _U_ 2 _N_ _N_ _N_ _N_,
	 parseType = _A_ 1 _U_ 2 _N_ _N_ _N_ _N_,
	 forced = _A_ 1 _U_ 0 _N_ _S_ "A" {_A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _!_ True [] [] _N_} _F_ _IF_ARGS_ 0 1 X 1 \ (u0 :: PElement) -> _!_ True [] [] _N_ #-}
instance Text Activities
	{-# GHC_PRAGMA _M_ GRIP {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 5 _!_ _TUP_4 [(Int -> [Char] -> [(Activities, [Char])]), (Int -> Activities -> [Char] -> [Char]), ([Char] -> [([Activities], [Char])]), ([Activities] -> [Char] -> [Char])] [_CONSTM_ Text readsPrec (Activities), _CONSTM_ Text showsPrec (Activities), _CONSTM_ Text readList (Activities), _CONSTM_ Text showList (Activities)] _N_
	 readsPrec = _A_ 1 _U_ 12 _N_ _S_ "U(P)" {_A_ 1 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_,
	 showsPrec = _A_ 2 _U_ 112 _N_ _S_ "LU(LLLLLL)" _N_ _N_,
	 readList = _A_ 0 _U_ 2 _N_ _N_ _N_ _N_,
	 showList = _A_ 0 _U_ 12 _N_ _N_ _N_ _N_ #-}
instance Text Line
	{-# GHC_PRAGMA _M_ GRIP {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 5 _!_ _TUP_4 [(Int -> [Char] -> [(Line, [Char])]), (Int -> Line -> [Char] -> [Char]), ([Char] -> [([Line], [Char])]), ([Line] -> [Char] -> [Char])] [_CONSTM_ Text readsPrec (Line), _CONSTM_ Text showsPrec (Line), _CONSTM_ Text readList (Line), _CONSTM_ Text showList (Line)] _N_
	 readsPrec = _A_ 1 _U_ 12 _N_ _S_ "U(P)" {_A_ 1 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_,
	 showsPrec = _A_ 2 _U_ 112 _N_ _S_ "LS" _N_ _N_,
	 readList = _A_ 0 _U_ 2 _N_ _N_ _N_ _N_,
	 showList = _A_ 0 _U_ 12 _N_ _N_ _N_ _N_ #-}
instance Text PElement
	{-# GHC_PRAGMA _M_ GRIP {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 5 _!_ _TUP_4 [(Int -> [Char] -> [(PElement, [Char])]), (Int -> PElement -> [Char] -> [Char]), ([Char] -> [([PElement], [Char])]), ([PElement] -> [Char] -> [Char])] [_CONSTM_ Text readsPrec (PElement), _CONSTM_ Text showsPrec (PElement), _CONSTM_ Text readList (PElement), _CONSTM_ Text showList (PElement)] _N_
	 readsPrec = _A_ 1 _U_ 12 _N_ _S_ "U(P)" {_A_ 1 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_,
	 showsPrec = _A_ 2 _U_ 112 _N_ _S_ "LU(LL)" {_A_ 3 _U_ 1222 _N_ _N_ _N_ _N_} _N_ _N_,
	 readList = _A_ 0 _U_ 2 _N_ _N_ _N_ _N_,
	 showList = _A_ 0 _U_ 12 _N_ _N_ _N_ _N_ #-}
instance Text Sparks
	{-# GHC_PRAGMA _M_ GRIP {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 5 _!_ _TUP_4 [(Int -> [Char] -> [(Sparks, [Char])]), (Int -> Sparks -> [Char] -> [Char]), ([Char] -> [([Sparks], [Char])]), ([Sparks] -> [Char] -> [Char])] [_CONSTM_ Text readsPrec (Sparks), _CONSTM_ Text showsPrec (Sparks), _CONSTM_ Text readList (Sparks), _CONSTM_ Text showList (Sparks)] _N_
	 readsPrec = _A_ 1 _U_ 12 _N_ _S_ "U(P)" {_A_ 1 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_,
	 showsPrec = _A_ 2 _U_ 112 _N_ _S_ "LU(LLLLL)" _N_ _N_,
	 readList = _A_ 0 _U_ 2 _N_ _N_ _N_ _N_,
	 showList = _A_ 0 _U_ 12 _N_ _N_ _N_ _N_ #-}

