{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface PlainTextIO where
import MaybeStateT(MST(..), bindMST, returnMST, thenMST)
import PreludeStdIO(Maybe)
type MST a b = a -> Maybe (b, a)
bindMST :: (b -> Maybe (a, b)) -> (a -> b -> Maybe (c, b)) -> b -> Maybe (c, b)
	{-# GHC_PRAGMA _A_ 3 _U_ 112 _N_ _S_ "SLL" _N_ _N_ #-}
consNewline :: [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ #-}
pprintAsList :: (a -> [Char] -> [Char]) -> [a] -> [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 3 _U_ 212 _N_ _N_ _N_ _N_ #-}
pprintAsList' :: (a -> [Char] -> [Char]) -> [a] -> [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 3 _U_ 212 _N_ _S_ "LSL" _N_ _N_ #-}
pprintElements :: (a -> [Char] -> [Char]) -> [a] -> [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 3 _U_ 212 _N_ _S_ "LSL" _N_ _N_ #-}
readElements :: Text a => [Char] -> [a]
	{-# GHC_PRAGMA _A_ 1 _U_ 12 _N_ _S_ "U(SAAA)" {_A_ 1 _U_ 21 _N_ _N_ _N_ _N_} _N_ _N_ #-}
readsFloat :: [Char] -> Maybe (Float, [Char])
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _SPEC_ _ORIG_ PlainTextIO readsItem [ (Float) ] _N_ #-}
readsInt :: [Char] -> Maybe (Int, [Char])
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _SPEC_ _ORIG_ PlainTextIO readsItem [ (Int) ] _N_ #-}
readsItem :: Text a => [Char] -> Maybe (a, [Char])
	{-# GHC_PRAGMA _A_ 1 _U_ 12 _N_ _S_ "U(SAAA)" {_A_ 1 _U_ 22 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ Float ] 1 { _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ }, [ Int ] 1 { _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ } #-}
returnMST :: b -> a -> Maybe (b, a)
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _N_ _N_ #-}
thenMST :: (b -> Maybe (a, b)) -> (a -> b -> Maybe (c, b)) -> b -> Maybe (c, b)
	{-# GHC_PRAGMA _A_ 3 _U_ 112 _N_ _S_ "SLL" _N_ _N_ #-}

