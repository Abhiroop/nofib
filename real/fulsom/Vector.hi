{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Vector where
import Interval(Interval)
import Types(Color)
amb :: Double
	{-# GHC_PRAGMA _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 2 _!_ D# [] [5.0000000000000000e-1##] _N_ #-}
len :: (Double, Double, Double) -> Double
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(U(P)U(P)U(P))" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
light :: Color -> (Double, Double, Double) -> Color
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(LLL)U(LLL)" {_A_ 4 _U_ 1111 _N_ _N_ _N_ _N_} _N_ _N_ #-}
makevector :: Interval Double -> Interval Double -> Interval Double -> Interval Double -> (Double, Double, Double)
	{-# GHC_PRAGMA _A_ 4 _U_ 1111 _N_ _N_ _N_ _N_ #-}
normalise :: (Double, Double, Double) -> (Double, Double, Double)
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(LLL)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}

