{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface BasicNumberApprox where
import BasicNumber(BasicNumber)
basicNumber2str :: BasicNumber -> Integer -> [Char]
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _S_ "SL" _N_ _N_ #-}
equ :: BasicNumber -> BasicNumber -> Integer -> Bool
	{-# GHC_PRAGMA _A_ 3 _U_ 222 _N_ _S_ "SSL" _N_ _N_ #-}
gt :: BasicNumber -> BasicNumber -> Integer -> Bool
	{-# GHC_PRAGMA _A_ 3 _U_ 222 _N_ _S_ "SSL" _N_ _N_ #-}
gte :: BasicNumber -> BasicNumber -> Integer -> Bool
	{-# GHC_PRAGMA _A_ 3 _U_ 222 _N_ _S_ "SSL" _N_ _N_ #-}
lt :: BasicNumber -> BasicNumber -> Integer -> Bool
	{-# GHC_PRAGMA _A_ 3 _U_ 222 _N_ _S_ "SSL" _N_ _N_ #-}
lte :: BasicNumber -> BasicNumber -> Integer -> Bool
	{-# GHC_PRAGMA _A_ 3 _U_ 222 _N_ _S_ "SSL" _N_ _N_ #-}
ne :: BasicNumber -> BasicNumber -> Integer -> Bool
	{-# GHC_PRAGMA _A_ 3 _U_ 222 _N_ _S_ "SSL" _N_ _N_ #-}
rabs :: BasicNumber -> Integer -> BasicNumber
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "SL" _N_ _N_ #-}
rsignum :: BasicNumber -> Integer -> BasicNumber
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "SL" _N_ _N_ #-}
rtoRational :: BasicNumber -> Integer -> BasicNumber
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "SL" _N_ _N_ #-}

