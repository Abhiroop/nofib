{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Env where
import PreludeIO(IOError, Request, Response)
import Types(Argtype, Expression, Value)
type Answer = [Response] -> [Request]
type Cont = Env -> [Response] -> [Request]
type Econt = Expression -> Env -> [Response] -> [Request]
data Env 	{-# GHC_PRAGMA MkEnv [Float] [[Char]] [[Char]] [[Char]] [([Char], [([Char], [Argtype])])] [([Char], Value)] [([Char], Value)] ([Char] -> (IOError -> [Response] -> [Request]) -> ([Response] -> [Request]) -> [Response] -> [Request]) #-}
type Ncont = Int -> Env -> [Response] -> [Request]
type Output = [Char] -> (IOError -> [Response] -> [Request]) -> ([Response] -> [Request]) -> [Response] -> [Request]
type Vcont = Value -> Env -> [Response] -> [Request]
type Xcont a = a -> Env -> [Response] -> [Request]
type Xscont a = [a] -> Env -> [Response] -> [Request]
choose :: [a] -> (a -> Env -> [Response] -> [Request]) -> Env -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 2 _U_ 2112 _N_ _N_ _N_ _N_ #-}
choosew :: [(Int, a)] -> (a -> Env -> [Response] -> [Request]) -> Env -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 2 _U_ 2212 _N_ _N_ _N_ _N_ #-}
default_output :: [Char] -> (IOError -> [Response] -> [Request]) -> ([Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 4 _U_ 2111 _N_ _N_ _F_ _IF_ARGS_ 0 4 XXXX 6 \ (u0 :: [Char]) (u1 :: IOError -> [Response] -> [Request]) (u2 :: [Response] -> [Request]) (u3 :: [Response]) -> _APP_  _ORIG_ PreludeIO appendChan [ _ORIG_ PreludeIO stdout, u0, u1, u2, u3 ] _N_ #-}
extend_type_env :: [([Char], [([Char], [Argtype])])] -> (Env -> [Response] -> [Request]) -> Env -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 3 _U_ 1112 _N_ _S_ "LSU(LLLLLLLL)" _N_ _N_ #-}
extend_val_env :: [([Char], Value)] -> (Env -> [Response] -> [Request]) -> Env -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 3 _U_ 1112 _N_ _S_ "LSU(LLLLLLLL)" _N_ _N_ #-}
get_all_lambdas :: ([([Char], Value)] -> Env -> [Response] -> [Request]) -> Env -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 2 _U_ 122 _N_ _S_ "SU(LLLLLLLL)" _F_ _IF_ARGS_ 0 2 XC 4 \ (u0 :: [([Char], Value)] -> Env -> [Response] -> [Request]) (u1 :: Env) -> case u1 of { _ALG_ _ORIG_ Env MkEnv (u2 :: [Float]) (u3 :: [[Char]]) (u4 :: [[Char]]) (u5 :: [[Char]]) (u6 :: [([Char], [([Char], [Argtype])])]) (u7 :: [([Char], Value)]) (u8 :: [([Char], Value)]) (u9 :: [Char] -> (IOError -> [Response] -> [Request]) -> ([Response] -> [Request]) -> [Response] -> [Request]) -> _APP_  u0 [ u8, u1 ]; _NO_DEFLT_ } _N_ #-}
get_all_type_decls :: ([([Char], [([Char], [Argtype])])] -> Env -> [Response] -> [Request]) -> Env -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 2 _U_ 122 _N_ _S_ "SU(LLLLLLLL)" _F_ _IF_ARGS_ 0 2 XC 4 \ (u0 :: [([Char], [([Char], [Argtype])])] -> Env -> [Response] -> [Request]) (u1 :: Env) -> case u1 of { _ALG_ _ORIG_ Env MkEnv (u2 :: [Float]) (u3 :: [[Char]]) (u4 :: [[Char]]) (u5 :: [[Char]]) (u6 :: [([Char], [([Char], [Argtype])])]) (u7 :: [([Char], Value)]) (u8 :: [([Char], Value)]) (u9 :: [Char] -> (IOError -> [Response] -> [Request]) -> ([Response] -> [Request]) -> [Response] -> [Request]) -> _APP_  u0 [ u6, u1 ]; _NO_DEFLT_ } _N_ #-}
get_all_type_names :: ([[Char]] -> Env -> [Response] -> [Request]) -> Env -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 2 _U_ 122 _N_ _S_ "SU(LLLLLLLL)" _N_ _N_ #-}
get_all_val_decls :: ([([Char], Value)] -> Env -> [Response] -> [Request]) -> Env -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 2 _U_ 122 _N_ _S_ "SU(LLLLLLLL)" _F_ _IF_ARGS_ 0 2 XC 4 \ (u0 :: [([Char], Value)] -> Env -> [Response] -> [Request]) (u1 :: Env) -> case u1 of { _ALG_ _ORIG_ Env MkEnv (u2 :: [Float]) (u3 :: [[Char]]) (u4 :: [[Char]]) (u5 :: [[Char]]) (u6 :: [([Char], [([Char], [Argtype])])]) (u7 :: [([Char], Value)]) (u8 :: [([Char], Value)]) (u9 :: [Char] -> (IOError -> [Response] -> [Request]) -> ([Response] -> [Request]) -> [Response] -> [Request]) -> _APP_  u0 [ u7, u1 ]; _NO_DEFLT_ } _N_ #-}
get_constructors :: Int -> ([[Char]] -> Env -> [Response] -> [Request]) -> Env -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 3 _U_ 2112 _N_ _S_ "LSU(LLLLLLLL)" _N_ _N_ #-}
get_output :: (([Char] -> (IOError -> [Response] -> [Request]) -> ([Response] -> [Request]) -> [Response] -> [Request]) -> Env -> [Response] -> [Request]) -> Env -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 2 _U_ 122 _N_ _S_ "SU(LLLLLLLL)" _F_ _IF_ARGS_ 0 2 XC 4 \ (u0 :: ([Char] -> (IOError -> [Response] -> [Request]) -> ([Response] -> [Request]) -> [Response] -> [Request]) -> Env -> [Response] -> [Request]) (u1 :: Env) -> case u1 of { _ALG_ _ORIG_ Env MkEnv (u2 :: [Float]) (u3 :: [[Char]]) (u4 :: [[Char]]) (u5 :: [[Char]]) (u6 :: [([Char], [([Char], [Argtype])])]) (u7 :: [([Char], Value)]) (u8 :: [([Char], Value)]) (u9 :: [Char] -> (IOError -> [Response] -> [Request]) -> ([Response] -> [Request]) -> [Response] -> [Request]) -> _APP_  u0 [ u9, u1 ]; _NO_DEFLT_ } _N_ #-}
get_type :: [Char] -> ([([Char], [Argtype])] -> Env -> [Response] -> [Request]) -> Env -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 3 _U_ 2122 _N_ _S_ "LSU(LLLLLLLL)" _N_ _N_ #-}
get_type_names :: Int -> ([[Char]] -> Env -> [Response] -> [Request]) -> Env -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 3 _U_ 2112 _N_ _S_ "LSU(LLLLLLLL)" _N_ _N_ #-}
get_val_names :: Int -> ([[Char]] -> Env -> [Response] -> [Request]) -> Env -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 3 _U_ 2112 _N_ _S_ "LSU(LLLLLLLL)" _N_ _N_ #-}
make_Env :: (Int, Int, Int) -> ([Char] -> (IOError -> [Response] -> [Request]) -> ([Response] -> [Request]) -> [Response] -> [Request]) -> Env
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _S_ "U(LLL)L" {_A_ 4 _U_ 2222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
pop_lambda :: (([Char], Value) -> Env -> [Response] -> [Request]) -> Env -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 2 _U_ 112 _N_ _S_ "SU(LLLLLLSL)" _N_ _N_ #-}
push_lambda :: ([Char], Value) -> (Env -> [Response] -> [Request]) -> Env -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 3 _U_ 1112 _N_ _S_ "U(LL)SU(LLLLLLLL)" {_A_ 4 _U_ 22112 _N_ _N_ _N_ _N_} _N_ _N_ #-}
set_output :: [Char] -> [Char] -> (IOError -> [Response] -> [Request]) -> ([Response] -> [Request]) -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 5 _U_ 22111 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ PreludeIO appendFile _N_ #-}
upto :: Int -> (Int -> Env -> [Response] -> [Request]) -> Env -> [Response] -> [Request]
	{-# GHC_PRAGMA _A_ 3 _U_ 1112 _N_ _S_ "LLU(SLLLLLLL)" _N_ _N_ #-}

