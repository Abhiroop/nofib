{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Types where
import PreludeArray(Assoc)
data Argtype   = Name_type [Char] | Basic_type Base_type | List_type Argtype | Tuple_type [Argtype] | Array_type Argtype Argtype
data Base_type   = Num_type Num_kind | Bool_type | Char_type
type Constructor = [Char]
data Expression   = Apply_exp Expression Expression | Id_exp [Char] | Val_exp Value | Tagged_exp [Char] [Expression] | List_exp [Expression] | Tuple_exp [Expression] | Lambda_exp [Char] Expression | Array_exp Expression Expression
type Htype = [([Char], [Argtype])]
data Num_kind   = Int_type | Integer_type | Float_type | Double_type
type Type_decl = ([Char], [([Char], [Argtype])])
type Type_name = [Char]
type Val_decl = ([Char], Value)
type Val_name = [Char]
data Value   = Num_val Num_kind Int | Bool_val Bool | Char_val Char | List_val [Value] | Tuple_val [Value] | Tagged_val [Char] [Value] | Array_val (Value, Value) [Assoc Value Value]
int_val :: Int -> Value
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ #-}
sep_list :: ([Char] -> [Char]) -> (a -> [Char] -> [Char]) -> [a] -> [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 3 _U_ 2212 _N_ _S_ "LLS" _N_ _N_ #-}
showsType_decl :: ([Char], [([Char], [Argtype])]) -> [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _S_ "U(LL)L" {_A_ 3 _U_ 112 _N_ _N_ _N_ _N_} _N_ _N_ #-}
showsVal_decl :: ([Char], Value) -> [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 12 _N_ _S_ "U(SL)" {_A_ 2 _U_ 122 _N_ _N_ _N_ _N_} _N_ _N_ #-}
vrange :: (Value, Value) -> [Value]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(SS)" {_A_ 2 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_ #-}
instance Eq Argtype
	{-# GHC_PRAGMA _M_ Types {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 3 _!_ _TUP_2 [(Argtype -> Argtype -> Bool), (Argtype -> Argtype -> Bool)] [_CONSTM_ Eq (==) (Argtype), _CONSTM_ Eq (/=) (Argtype)] _N_
	 (==) = _A_ 2 _U_ 11 _N_ _S_ "SS" _N_ _N_,
	 (/=) = _A_ 2 _U_ 22 _N_ _S_ "SS" _N_ _N_ #-}
instance Eq Base_type
	{-# GHC_PRAGMA _M_ Types {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 3 _!_ _TUP_2 [(Base_type -> Base_type -> Bool), (Base_type -> Base_type -> Bool)] [_CONSTM_ Eq (==) (Base_type), _CONSTM_ Eq (/=) (Base_type)] _N_
	 (==) = _A_ 2 _U_ 22 _N_ _S_ "SS" _N_ _N_,
	 (/=) = _A_ 2 _U_ 22 _N_ _S_ "SS" _N_ _N_ #-}
instance Eq Expression
	{-# GHC_PRAGMA _M_ Types {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 3 _!_ _TUP_2 [(Expression -> Expression -> Bool), (Expression -> Expression -> Bool)] [_CONSTM_ Eq (==) (Expression), _CONSTM_ Eq (/=) (Expression)] _N_
	 (==) = _A_ 2 _U_ 11 _N_ _S_ "SS" _N_ _N_,
	 (/=) = _A_ 2 _U_ 22 _N_ _S_ "SS" _N_ _N_ #-}
instance Eq Num_kind
	{-# GHC_PRAGMA _M_ Types {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 3 _!_ _TUP_2 [(Num_kind -> Num_kind -> Bool), (Num_kind -> Num_kind -> Bool)] [_CONSTM_ Eq (==) (Num_kind), _CONSTM_ Eq (/=) (Num_kind)] _N_
	 (==) = _A_ 2 _U_ 11 _N_ _S_ "EE" _N_ _N_,
	 (/=) = _A_ 2 _U_ 11 _N_ _S_ "EE" _N_ _N_ #-}
instance Eq Value
	{-# GHC_PRAGMA _M_ Types {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 3 _!_ _TUP_2 [(Value -> Value -> Bool), (Value -> Value -> Bool)] [_CONSTM_ Eq (==) (Value), _CONSTM_ Eq (/=) (Value)] _N_
	 (==) = _A_ 2 _U_ 11 _N_ _S_ "SS" _N_ _N_,
	 (/=) = _A_ 2 _U_ 22 _N_ _S_ "SS" _N_ _N_ #-}
instance Text Argtype
	{-# GHC_PRAGMA _M_ Types {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 5 _!_ _TUP_4 [(Int -> [Char] -> [(Argtype, [Char])]), (Int -> Argtype -> [Char] -> [Char]), ([Char] -> [([Argtype], [Char])]), ([Argtype] -> [Char] -> [Char])] [_CONSTM_ Text readsPrec (Argtype), _CONSTM_ Text showsPrec (Argtype), _CONSTM_ Text readList (Argtype), _CONSTM_ Text showList (Argtype)] _N_
	 readsPrec = _A_ 2 _U_ 22 _N_ _S_ _!_ _F_ _IF_ARGS_ 0 2 XX 4 \ (u0 :: Int) (u1 :: [Char]) -> _APP_  _TYAPP_  patError# { (Int -> [Char] -> [(Argtype, [Char])]) } [ _NOREP_S_ "%DPreludeCore.Text.readsPrec\"", u0, u1 ] _N_,
	 showsPrec = _A_ 2 _U_ 112 _N_ _S_ "LS" _N_ _N_,
	 readList = _A_ 0 _U_ 2 _N_ _N_ _N_ _N_,
	 showList = _A_ 0 _U_ 12 _N_ _N_ _N_ _N_ #-}
instance Text Base_type
	{-# GHC_PRAGMA _M_ Types {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 5 _!_ _TUP_4 [(Int -> [Char] -> [(Base_type, [Char])]), (Int -> Base_type -> [Char] -> [Char]), ([Char] -> [([Base_type], [Char])]), ([Base_type] -> [Char] -> [Char])] [_CONSTM_ Text readsPrec (Base_type), _CONSTM_ Text showsPrec (Base_type), _CONSTM_ Text readList (Base_type), _CONSTM_ Text showList (Base_type)] _N_
	 readsPrec = _A_ 2 _U_ 22 _N_ _S_ _!_ _F_ _IF_ARGS_ 0 2 XX 4 \ (u0 :: Int) (u1 :: [Char]) -> _APP_  _TYAPP_  patError# { (Int -> [Char] -> [(Base_type, [Char])]) } [ _NOREP_S_ "%DPreludeCore.Text.readsPrec\"", u0, u1 ] _N_,
	 showsPrec = _A_ 2 _U_ 012 _N_ _S_ "AS" {_A_ 1 _U_ 12 _N_ _N_ _N_ _N_} _N_ _N_,
	 readList = _A_ 0 _U_ 2 _N_ _N_ _N_ _N_,
	 showList = _A_ 0 _U_ 12 _N_ _N_ _N_ _N_ #-}
instance Text Expression
	{-# GHC_PRAGMA _M_ Types {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 5 _!_ _TUP_4 [(Int -> [Char] -> [(Expression, [Char])]), (Int -> Expression -> [Char] -> [Char]), ([Char] -> [([Expression], [Char])]), ([Expression] -> [Char] -> [Char])] [_CONSTM_ Text readsPrec (Expression), _CONSTM_ Text showsPrec (Expression), _CONSTM_ Text readList (Expression), _CONSTM_ Text showList (Expression)] _N_
	 readsPrec = _A_ 2 _U_ 22 _N_ _S_ _!_ _F_ _IF_ARGS_ 0 2 XX 4 \ (u0 :: Int) (u1 :: [Char]) -> _APP_  _TYAPP_  patError# { (Int -> [Char] -> [(Expression, [Char])]) } [ _NOREP_S_ "%DPreludeCore.Text.readsPrec\"", u0, u1 ] _N_,
	 showsPrec = _A_ 0 _U_ 212 _N_ _N_ _N_ _N_,
	 readList = _A_ 0 _U_ 2 _N_ _N_ _N_ _N_,
	 showList = _A_ 0 _U_ 12 _N_ _N_ _N_ _N_ #-}
instance Text Num_kind
	{-# GHC_PRAGMA _M_ Types {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 5 _!_ _TUP_4 [(Int -> [Char] -> [(Num_kind, [Char])]), (Int -> Num_kind -> [Char] -> [Char]), ([Char] -> [([Num_kind], [Char])]), ([Num_kind] -> [Char] -> [Char])] [_CONSTM_ Text readsPrec (Num_kind), _CONSTM_ Text showsPrec (Num_kind), _CONSTM_ Text readList (Num_kind), _CONSTM_ Text showList (Num_kind)] _N_
	 readsPrec = _A_ 2 _U_ 22 _N_ _S_ _!_ _F_ _IF_ARGS_ 0 2 XX 4 \ (u0 :: Int) (u1 :: [Char]) -> _APP_  _TYAPP_  patError# { (Int -> [Char] -> [(Num_kind, [Char])]) } [ _NOREP_S_ "%DPreludeCore.Text.readsPrec\"", u0, u1 ] _N_,
	 showsPrec = _A_ 3 _U_ 012 _N_ _S_ "AEL" {_A_ 2 _U_ 12 _N_ _N_ _N_ _N_} _N_ _N_,
	 readList = _A_ 0 _U_ 2 _N_ _N_ _N_ _N_,
	 showList = _A_ 0 _U_ 12 _N_ _N_ _N_ _N_ #-}
instance Text Value
	{-# GHC_PRAGMA _M_ Types {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 5 _!_ _TUP_4 [(Int -> [Char] -> [(Value, [Char])]), (Int -> Value -> [Char] -> [Char]), ([Char] -> [([Value], [Char])]), ([Value] -> [Char] -> [Char])] [_CONSTM_ Text readsPrec (Value), _CONSTM_ Text showsPrec (Value), _CONSTM_ Text readList (Value), _CONSTM_ Text showList (Value)] _N_
	 readsPrec = _A_ 2 _U_ 22 _N_ _S_ _!_ _F_ _IF_ARGS_ 0 2 XX 4 \ (u0 :: Int) (u1 :: [Char]) -> _APP_  _TYAPP_  patError# { (Int -> [Char] -> [(Value, [Char])]) } [ _NOREP_S_ "%DPreludeCore.Text.readsPrec\"", u0, u1 ] _N_,
	 showsPrec = _A_ 0 _U_ 212 _N_ _N_ _N_ _N_,
	 readList = _A_ 0 _U_ 2 _N_ _N_ _N_ _N_,
	 showList = _A_ 0 _U_ 12 _N_ _N_ _N_ _N_ #-}

