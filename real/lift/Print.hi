{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Print where
import LambdaLift(Expr)
type Iseq = (Int -> Bool -> [Char]) -> Int -> Bool -> [Char]
type Oseq = Int -> Bool -> [Char]
i_append :: (a -> c) -> (b -> a) -> b -> c
	{-# GHC_PRAGMA _A_ 3 _U_ 112 _N_ _S_ "SLL" _F_ _IF_ARGS_ 3 3 XXX 5 _/\_ u0 u1 u2 -> \ (u3 :: u0 -> u2) (u4 :: u1 -> u0) (u5 :: u1) -> let {(u6 :: u0) = _APP_  u4 [ u5 ]} in _APP_  u3 [ u6 ] _N_ #-}
i_char :: Char -> (Int -> Bool -> [Char]) -> Int -> Bool -> [Char]
	{-# GHC_PRAGMA _A_ 4 _U_ 1122 _N_ _S_ "U(P)LLL" {_A_ 4 _U_ 2122 _N_ _N_ _N_ _N_} _N_ _N_ #-}
i_concat :: [(Int -> Bool -> [Char]) -> Int -> Bool -> [Char]] -> (Int -> Bool -> [Char]) -> Int -> Bool -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 1222 _N_ _S_ "S" _N_ _N_ #-}
i_indent :: Num d => d -> ((a -> b -> c) -> d -> e -> f) -> (d -> b -> c) -> d -> e -> f
	{-# GHC_PRAGMA _A_ 6 _U_ 121222 _N_ _S_ "LLSLLL" _N_ _SPECIALISE_ [ _N_, _N_, _N_, Int, _N_, _N_ ] 1 { _A_ 5 _U_ 11222 _N_ _S_ "LSLLL" _N_ _N_ } #-}
i_interleave :: ((Int -> Bool -> [Char]) -> Int -> Bool -> [Char]) -> [(Int -> Bool -> [Char]) -> Int -> Bool -> [Char]] -> (Int -> Bool -> [Char]) -> Int -> Bool -> [Char]
	{-# GHC_PRAGMA _A_ 2 _U_ 22222 _N_ _S_ "LS" _N_ _N_ #-}
i_mkstr :: ((Int -> Bool -> [Char]) -> Int -> Bool -> [Char]) -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
i_newline :: (Int -> Bool -> [Char]) -> Int -> Bool -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 122 _N_ _N_ _N_ _N_ #-}
i_nil :: a -> a
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _F_ _IF_ARGS_ 1 1 X 1 _/\_ u0 -> \ (u1 :: u0) -> u1 _N_ #-}
i_num :: Num a => a -> (Int -> Bool -> [Char]) -> Int -> Bool -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 12222 _N_ _S_ "U(AU(ASAA)AAAAAAAA)" {_A_ 1 _U_ 22222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ Integer ] 1 { _A_ 1 _U_ 1222 _N_ _S_ "U(PPP)" {_A_ 3 _U_ 222222 _N_ _N_ _N_ _N_} _N_ _N_ } #-}
i_space :: (Int -> Bool -> [Char]) -> Int -> Bool -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 122 _N_ _N_ _N_ _N_ #-}
i_str :: [Char] -> (Int -> Bool -> [Char]) -> Int -> Bool -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 1222 _N_ _S_ "S" _N_ _N_ #-}
o_empty :: Int -> Bool -> [Char]
	{-# GHC_PRAGMA _A_ 2 _U_ 00 _N_ _S_ "AA" {_A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _!_ _NIL_ [Char] [] _N_} _F_ _IF_ARGS_ 0 2 XX 1 \ (u0 :: Int) (u1 :: Bool) -> _!_ _NIL_ [Char] [] _N_ #-}
o_mkstr :: (Int -> Bool -> [Char]) -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
ppr :: (a -> (Int -> Bool -> [Char]) -> Int -> Bool -> [Char]) -> Expr a -> (Int -> Bool -> [Char]) -> Int -> Bool -> [Char]
	{-# GHC_PRAGMA _A_ 0 _U_ 22222 _N_ _N_ _N_ _N_ #-}
ppr_atomic :: (a -> (Int -> Bool -> [Char]) -> Int -> Bool -> [Char]) -> Expr a -> (Int -> Bool -> [Char]) -> Int -> Bool -> [Char]
	{-# GHC_PRAGMA _A_ 0 _U_ 22222 _N_ _N_ _N_ _N_ #-}
ppr_def :: (a -> (Int -> Bool -> [Char]) -> Int -> Bool -> [Char]) -> (a, Expr a) -> (Int -> Bool -> [Char]) -> Int -> Bool -> [Char]
	{-# GHC_PRAGMA _A_ 0 _U_ 21222 _N_ _N_ _N_ _N_ #-}
pprint :: (a -> (Int -> Bool -> [Char]) -> Int -> Bool -> [Char]) -> Expr a -> [Char]
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "LS" _N_ _N_ #-}
pprintExpr :: Expr [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 2 _APP_  _TYAPP_  _ORIG_ Print pprint { [Char] } [ _ORIG_ Print i_str ] _N_ #-}
pprintLevel :: Expr ([Char], Integer) -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ #-}
pprintSCs :: [([Char], [[Char]], Expr [Char])] -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
ppsc :: ([Char], [[Char]], Expr [Char]) -> (Int -> Bool -> [Char]) -> Int -> Bool -> [Char]
	{-# GHC_PRAGMA _A_ 0 _U_ 1222 _N_ _N_ _N_ _N_ #-}
pspaces :: Num a => a -> [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 122 _N_ _S_ "U(U(SA)AALAAAAAL)" {_A_ 3 _U_ 22222 _N_ _N_ _N_ _N_} _N_ _SPECIALISE_ [ Int ] 1 { _A_ 2 _U_ 12 _N_ _S_ "U(P)L" {_A_ 2 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_ } #-}

