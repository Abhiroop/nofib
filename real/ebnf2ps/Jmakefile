SRCS_HS = Parsers.hs StringMatch.hs Info.hs Fonts.hs IOSupplement.hs \
	  EbnfGrammar.hs EbnfLayout.hs \
	  PsOutput.hs FigOutput.hs Color.hs CommandLine.hs AbstractSyntax.hs \
	  Lexer.hs HappyParser.hs GrammarTransform.hs \
	  Main.hs
OBJS_O  = Parsers.o StringMatch.o Info.o Fonts.o IOSupplement.o \
	  EbnfGrammar.o EbnfLayout.o \
	  PsOutput.o FigOutput.o Color.o CommandLine.o AbstractSyntax.o \
	  Lexer.o HappyParser.o GrammarTransform.o \
	  Main.o

/* Cmd line needs work */

NoFibMultiModuleCompileAndRun(ebnf2ps, ebnf2ps.stdin apat -o1 ebnf2ps.stdout)

HappyParser.hs : HappyParser.ly
	$(RM) HappyParser.hs
	happy HappyParser.ly
	@chmod 444 HappyParser.hs

NoFibHaskellCompile(ebnf2ps,Parsers,hs)
NoFibHaskellCompile(ebnf2ps,StringMatch,hs)
NoFibHaskellCompile(ebnf2ps,Info,hs)
NoFibHaskellCompile(ebnf2ps,Fonts,hs)
NoFibHaskellCompile(ebnf2ps,IOSupplement,hs)
NoFibHaskellCompile(ebnf2ps,EbnfGrammar,hs)
NoFibHaskellCompile(ebnf2ps,EbnfLayout,hs)
NoFibHaskellCompile(ebnf2ps,PsOutput,hs)
NoFibHaskellCompile(ebnf2ps,FigOutput,hs)
NoFibHaskellCompile(ebnf2ps,Color,hs)
NoFibHaskellCompile(ebnf2ps,CommandLine,hs)
NoFibHaskellCompile(ebnf2ps,AbstractSyntax,hs)
NoFibHaskellCompile(ebnf2ps,Lexer,hs)
NoFibHaskellCompile(ebnf2ps,HappyParser,hs)
NoFibHaskellCompile(ebnf2ps,GrammarTransform,hs)
NoFibHaskellCompile(ebnf2ps,Main,hs)

NoFibDependTarget(ebnf2ps, $(SRCS_HS))
