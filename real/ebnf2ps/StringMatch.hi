{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface StringMatch where
infixl 7 <<*
infixl 7 <<<
infixr 8 +.+
infixr 8 +..
infixr 8 ..+
infixr 6 |||
type ParseRegexp = [Char] -> [([Char], [Char])]
(+.+) :: ([c] -> [(a, [c])]) -> ([c] -> [(b, [c])]) -> [c] -> [((a, b), [c])]
	{-# GHC_PRAGMA _A_ 3 _U_ 122 _N_ _N_ _F_ _IF_ARGS_ 3 0 X 1 _/\_ u0 u1 u2 -> _TYAPP_  _TYAPP_  _TYAPP_  _ORIG_ Parsers thn { u2 } { u0 } { u1 } _N_ #-}
(+..) :: ([c] -> [(b, [c])]) -> ([c] -> [(a, [c])]) -> [c] -> [(b, [c])]
	{-# GHC_PRAGMA _A_ 3 _U_ 122 _N_ _N_ _F_ _IF_ARGS_ 3 0 X 1 _/\_ u0 u1 u2 -> _TYAPP_  _TYAPP_  _TYAPP_  _ORIG_ Parsers thnx { u0 } { u2 } { u1 } _N_ #-}
(..+) :: ([c] -> [(a, [c])]) -> ([c] -> [(b, [c])]) -> [c] -> [(b, [c])]
	{-# GHC_PRAGMA _A_ 3 _U_ 122 _N_ _N_ _F_ _IF_ARGS_ 3 0 X 1 _/\_ u0 u1 u2 -> _TYAPP_  _TYAPP_  _TYAPP_  _ORIG_ Parsers xthn { u0 } { u2 } { u1 } _N_ #-}
(<<*) :: ([d] -> [((a, b), [d])]) -> (a -> b -> c) -> [d] -> [(c, [d])]
	{-# GHC_PRAGMA _A_ 3 _U_ 122 _N_ _N_ _F_ _IF_ARGS_ 4 0 X 1 _/\_ u0 u1 u2 u3 -> _TYAPP_  _TYAPP_  _TYAPP_  _TYAPP_  _ORIG_ Parsers using2 { u0 } { u1 } { u3 } { u2 } _N_ #-}
(<<<) :: ([c] -> [(a, [c])]) -> (a -> b) -> [c] -> [(b, [c])]
	{-# GHC_PRAGMA _A_ 3 _U_ 122 _N_ _N_ _F_ _IF_ARGS_ 3 0 X 1 _/\_ u0 u1 u2 -> _TYAPP_  _TYAPP_  _TYAPP_  _ORIG_ Parsers using { u0 } { u2 } { u1 } _N_ #-}
anyC :: [a] -> [(a, [a])]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
butC :: Eq a => [a] -> [a] -> [(a, [a])]
	{-# GHC_PRAGMA _A_ 3 _U_ 121 _N_ _S_ "LLS" _N_ _SPECIALISE_ [ Char ] 1 { _A_ 2 _U_ 21 _N_ _S_ "LS" _N_ _N_ } #-}
lit :: Eq a => a -> [a] -> [(a, [a])]
	{-# GHC_PRAGMA _A_ 2 _U_ 121 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ Parsers literal _SPECIALISE_ [ Char ] 1 { _A_ 1 _U_ 21 _N_ _N_ _F_ _IF_ARGS_ 0 1 X 3 \ (u0 :: Char) -> _APP_  _TYAPP_  _ORIG_ Parsers literal { Char } [ _DFUN_ Eq (Char), u0 ] _N_ } #-}
noC :: [Char] -> [([Char], [Char])]
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_ #-}
regexp0 :: [Char] -> [([Char] -> [([Char], [Char])], [Char])]
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
rrAtom :: [Char] -> [([Char] -> [([Char], [Char])], [Char])]
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
rrExtAtom :: [Char] -> [([Char] -> [([Char], [Char])], [Char])]
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
rrFactor :: [Char] -> [([Char] -> [([Char], [Char])], [Char])]
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
rrRegexp :: [Char] -> [([Char] -> [([Char], [Char])], [Char])]
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
star :: ([b] -> [(a, [b])]) -> [b] -> [([a], [b])]
	{-# GHC_PRAGMA _A_ 1 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 2 0 X 1 _/\_ u0 u1 -> _TYAPP_  _TYAPP_  _ORIG_ Parsers rpt { u1 } { u0 } _N_ #-}
stringMatch :: [Char] -> [Char] -> Bool
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _N_ _N_ #-}
unitL :: a -> [a]
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ #-}
(|||) :: ([b] -> [(a, [b])]) -> ([b] -> [(a, [b])]) -> [b] -> [(a, [b])]
	{-# GHC_PRAGMA _A_ 3 _U_ 112 _N_ _N_ _F_ _IF_ARGS_ 2 0 X 1 _/\_ u0 u1 -> _TYAPP_  _TYAPP_  _ORIG_ Parsers alt { u1 } { u0 } _N_ #-}

