{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Lexer where
data Token   = Ident [Char] | Symbol [Char] | String [Char]
getIdent :: Token -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
getString :: Token -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
isIdChar :: Char -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(P)" {_A_ 1 _U_ 2 _N_ _N_ _N_ _N_} _N_ _N_ #-}
isIdent :: Token -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _F_ _IF_ARGS_ 0 1 C 5 \ (u0 :: Token) -> case u0 of { _ALG_ _ORIG_ Lexer Ident (u1 :: [Char]) -> _!_ True [] []; (u2 :: Token) -> _!_ False [] [] } _N_ #-}
isString :: Token -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _F_ _IF_ARGS_ 0 1 C 5 \ (u0 :: Token) -> case u0 of { _ALG_ _ORIG_ Lexer String (u1 :: [Char]) -> _!_ True [] []; (u2 :: Token) -> _!_ False [] [] } _N_ #-}
isSymbolChar :: Char -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ #-}
lexChar :: [Char] -> ([Char], [Char])
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_ #-}
lexString :: [Char] -> ([Char], [Char])
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_ #-}
lexer :: [Char] -> [Token]
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_ #-}
theSymbols :: [Char]
	{-# GHC_PRAGMA _A_ 0 _N_ _N_ _N_ _N_ _N_ #-}
uncomment :: [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_ #-}
uncommentChar :: [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_ #-}
uncommentString :: [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_ #-}
instance Text Token
	{-# GHC_PRAGMA _M_ Lexer {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 5 _!_ _TUP_4 [(Int -> [Char] -> [(Token, [Char])]), (Int -> Token -> [Char] -> [Char]), ([Char] -> [([Token], [Char])]), ([Token] -> [Char] -> [Char])] [_CONSTM_ Text readsPrec (Token), _CONSTM_ Text showsPrec (Token), _CONSTM_ Text readList (Token), _CONSTM_ Text showList (Token)] _N_
	 readsPrec = _A_ 2 _U_ 22 _N_ _S_ _!_ _F_ _IF_ARGS_ 0 2 XX 4 \ (u0 :: Int) (u1 :: [Char]) -> _APP_  _TYAPP_  patError# { (Int -> [Char] -> [(Token, [Char])]) } [ _NOREP_S_ "%DPreludeCore.Text.readsPrec\"", u0, u1 ] _N_,
	 showsPrec = _A_ 3 _U_ 012 _N_ _S_ "ASL" {_A_ 2 _U_ 12 _N_ _N_ _N_ _N_} _N_ _N_,
	 readList = _A_ 0 _U_ 2 _N_ _N_ _N_ _N_,
	 showList = _A_ 1 _U_ 12 _N_ _S_ "S" _N_ _N_ #-}

