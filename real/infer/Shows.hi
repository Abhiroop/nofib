{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Shows where
type Shows a = a -> [Char] -> [Char]
showsChar :: Char -> [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 0 2 XX 3 \ (u0 :: Char) (u1 :: [Char]) -> _!_ (:) [Char] [u0, u1] _N_ #-}
showsConcat :: [[Char] -> [Char]] -> [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 12 _N_ _S_ "S" _N_ _N_ #-}
showsEmpty :: [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _F_ _IF_ARGS_ 0 1 X 1 \ (u0 :: [Char]) -> u0 _N_ #-}
showsListOf :: (a -> [Char] -> [Char]) -> [a] -> [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 212 _N_ _N_ _N_ _N_ #-}
showsParen :: ([Char] -> [Char]) -> [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _N_ _N_ _N_ #-}
showsParenIf :: Bool -> ([Char] -> [Char]) -> [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 2 _U_ 122 _N_ _S_ "EL" _F_ _IF_ARGS_ 0 2 CX 5 \ (u0 :: Bool) (u1 :: [Char] -> [Char]) -> case u0 of { _ALG_ True  -> _APP_  _ORIG_ Shows showsParen [ u1 ]; False  -> u1; _NO_DEFLT_ } _N_ #-}
showsStar :: (a -> [Char] -> [Char]) -> [a] -> [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 2 _U_ 212 _N_ _S_ "LS" _N_ _N_ #-}
showsStarSep :: [Char] -> (a -> [Char] -> [Char]) -> [a] -> [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 3 _U_ 2212 _N_ _S_ "LLS" _N_ _N_ #-}
showsString :: [Char] -> [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _TYAPP_  _ORIG_ PreludeList (++) { Char } _N_ #-}
showsSurround :: [Char] -> (a -> [Char] -> [Char]) -> [Char] -> a -> [Char] -> [Char]
	{-# GHC_PRAGMA _A_ 5 _U_ 11122 _N_ _S_ "SLLLL" _N_ _N_ #-}

