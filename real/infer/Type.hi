{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Type where
data MonoType   = TVar [Char] | TCon [Char] [MonoType]
data PolyType   = All [[Char]] MonoType
type TConId = [Char]
type TVarId = [Char]
arrow :: MonoType -> MonoType -> MonoType
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _N_ _N_ #-}
freeTVarMono :: MonoType -> [[Char]]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
freeTVarPoly :: PolyType -> [[Char]]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(SL)" {_A_ 2 _U_ 21 _N_ _N_ _N_ _N_} _N_ _N_ #-}
instance Eq MonoType
	{-# GHC_PRAGMA _M_ Type {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 3 _!_ _TUP_2 [(MonoType -> MonoType -> Bool), (MonoType -> MonoType -> Bool)] [_CONSTM_ Eq (==) (MonoType), _CONSTM_ Eq (/=) (MonoType)] _N_
	 (==) = _A_ 2 _U_ 11 _N_ _S_ "SS" _N_ _N_,
	 (/=) = _A_ 2 _U_ 22 _N_ _N_ _N_ _N_ #-}
instance Text MonoType
	{-# GHC_PRAGMA _M_ Type {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 5 _!_ _TUP_4 [(Int -> [Char] -> [(MonoType, [Char])]), (Int -> MonoType -> [Char] -> [Char]), ([Char] -> [([MonoType], [Char])]), ([MonoType] -> [Char] -> [Char])] [_CONSTM_ Text readsPrec (MonoType), _CONSTM_ Text showsPrec (MonoType), _CONSTM_ Text readList (MonoType), _CONSTM_ Text showList (MonoType)] _N_
	 readsPrec = _A_ 0 _U_ 12 _N_ _N_ _N_ _N_,
	 showsPrec = _A_ 2 _U_ 212 _N_ _S_ "LS" _N_ _N_,
	 readList = _A_ 0 _U_ 2 _N_ _N_ _N_ _N_,
	 showList = _A_ 0 _U_ 12 _N_ _N_ _N_ _N_ #-}
instance Text PolyType
	{-# GHC_PRAGMA _M_ Type {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 5 _!_ _TUP_4 [(Int -> [Char] -> [(PolyType, [Char])]), (Int -> PolyType -> [Char] -> [Char]), ([Char] -> [([PolyType], [Char])]), ([PolyType] -> [Char] -> [Char])] [_CONSTM_ Text readsPrec (PolyType), _CONSTM_ Text showsPrec (PolyType), _CONSTM_ Text readList (PolyType), _CONSTM_ Text showList (PolyType)] _N_
	 readsPrec = _A_ 1 _U_ 02 _N_ _S_ "A" {_A_ 0 _U_ 2 _N_ _N_ _N_ _N_} _N_ _N_,
	 showsPrec = _A_ 2 _U_ 012 _N_ _S_ "AU(LL)" {_A_ 2 _U_ 112 _N_ _N_ _N_ _N_} _N_ _N_,
	 readList = _A_ 0 _U_ 2 _N_ _N_ _N_ _N_,
	 showList = _A_ 0 _U_ 12 _N_ _N_ _N_ _N_ #-}

