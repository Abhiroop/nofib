{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Maybe where
data Maybe a 	{-# GHC_PRAGMA Just a | Nothing #-}
eachM :: Maybe a -> (a -> b) -> Maybe b
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "SL" _N_ _N_ #-}
existsM :: Maybe a -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _F_ _IF_ARGS_ 1 1 C 4 _/\_ u0 -> \ (u1 :: Maybe u0) -> case u1 of { _ALG_ _ORIG_ Maybe Just (u2 :: u0) -> _!_ True [] []; _ORIG_ Maybe Nothing  -> _!_ False [] []; _NO_DEFLT_ } _N_ #-}
failM :: Maybe a
	{-# GHC_PRAGMA _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 1 0 X 1 _/\_ u0 -> _!_ _ORIG_ Maybe Nothing [u0] [] _N_ #-}
filterM :: (a -> Bool) -> Maybe a -> Maybe a
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "LS" _N_ _N_ #-}
guardM :: Bool -> Maybe a -> Maybe a
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "EL" _F_ _IF_ARGS_ 1 2 CX 4 _/\_ u0 -> \ (u1 :: Bool) (u2 :: Maybe u0) -> case u1 of { _ALG_ True  -> u2; False  -> _!_ _ORIG_ Maybe Nothing [u0] []; _NO_DEFLT_ } _N_ #-}
orM :: Maybe a -> Maybe a -> Maybe a
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "SL" _F_ _IF_ARGS_ 1 2 CX 5 _/\_ u0 -> \ (u1 :: Maybe u0) (u2 :: Maybe u0) -> case u1 of { _ALG_ _ORIG_ Maybe Just (u3 :: u0) -> _!_ _ORIG_ Maybe Just [u0] [u3]; _ORIG_ Maybe Nothing  -> u2; _NO_DEFLT_ } _N_ #-}
returnM :: a -> Maybe a
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 1 1 X 2 _/\_ u0 -> \ (u1 :: u0) -> _!_ _ORIG_ Maybe Just [u0] [u1] _N_ #-}
theM :: Maybe a -> a
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
thenM :: Maybe a -> (a -> Maybe b) -> Maybe b
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "SL" _F_ _IF_ARGS_ 2 2 CX 5 _/\_ u0 u1 -> \ (u2 :: Maybe u0) (u3 :: u0 -> Maybe u1) -> case u2 of { _ALG_ _ORIG_ Maybe Just (u4 :: u0) -> _APP_  u3 [ u4 ]; _ORIG_ Maybe Nothing  -> _!_ _ORIG_ Maybe Nothing [u1] []; _NO_DEFLT_ } _N_ #-}
useM :: a -> Maybe a -> a
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "LS" _F_ _IF_ARGS_ 1 2 XC 4 _/\_ u0 -> \ (u1 :: u0) (u2 :: Maybe u0) -> case u2 of { _ALG_ _ORIG_ Maybe Just (u3 :: u0) -> u3; _ORIG_ Maybe Nothing  -> u1; _NO_DEFLT_ } _N_ #-}

