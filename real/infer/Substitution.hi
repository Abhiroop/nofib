{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Substitution where
import FiniteMap(FM)
import Maybe(Maybe)
import Type(MonoType)
data Sub 	{-# GHC_PRAGMA MkSub (FM [Char] MonoType) #-}
applySub :: Sub -> MonoType -> MonoType
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "LS" _N_ _N_ #-}
domSub :: Sub -> [[Char]]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(U(S))" {_A_ 1 _U_ 2 _N_ _N_ _N_ _N_} _N_ _N_ #-}
emptySub :: Sub
	{-# GHC_PRAGMA _A_ 0 _N_ _N_ _N_ _N_ _N_ #-}
extendSub :: Sub -> [Char] -> MonoType -> Sub
	{-# GHC_PRAGMA _A_ 3 _U_ 221 _N_ _N_ _N_ _N_ #-}
lookupSub :: Sub -> [Char] -> MonoType
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _S_ "U(U(S))L" {_A_ 2 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_ #-}
makeSub :: [([Char], MonoType)] -> Sub
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ #-}
thenSub :: Sub -> Sub -> Sub
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _N_ _N_ _N_ #-}
unifySub :: MonoType -> MonoType -> Sub -> Maybe Sub
	{-# GHC_PRAGMA _A_ 3 _U_ 222 _N_ _S_ "SSL" _N_ _N_ #-}

