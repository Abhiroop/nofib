{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Parser2 where
import BaseDefs(CExprP, PResult, PartialExpr, TDefExpr)
paAlter :: [(Int, [Char])] -> PResult ([Char], ([[Char]], CExprP [Char]))
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paAlters :: [(Int, [Char])] -> PResult [([Char], ([[Char]], CExprP [Char]))]
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paAlts :: [([Char] -> Bool, [(Int, [Char])] -> PResult a)] -> [(Int, [Char])] -> PResult a
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _S_ "LS" _N_ _N_ #-}
paApply :: ([(Int, [Char])] -> PResult a) -> (a -> b) -> [(Int, [Char])] -> PResult b
	{-# GHC_PRAGMA _A_ 3 _U_ 112 _N_ _S_ "SLL" _N_ _N_ #-}
paAssembleOp :: CExprP [Char] -> PartialExpr -> CExprP [Char]
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "LS" _N_ _N_ #-}
paAtomic :: [(Int, [Char])] -> PResult (CExprP [Char])
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paBracExpr :: [(Int, [Char])] -> PResult (CExprP [Char])
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paCase :: [(Int, [Char])] -> PResult (CExprP [Char])
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paCname :: [(Int, [Char])] -> PResult [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 2 _APP_  _ORIG_ Parser2 paSat [ _ORIG_ Parser2 paIsCname ] _N_ #-}
paConstr :: [(Int, [Char])] -> PResult (CExprP a)
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ #-}
paConstrAlt :: [(Int, [Char])] -> PResult ([Char], [TDefExpr])
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paConstrAlts :: [(Int, [Char])] -> PResult [([Char], [TDefExpr])]
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paDefn :: [(Int, [Char])] -> PResult ([Char], CExprP [Char])
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paDefns :: [(Int, [Char])] -> PResult [([Char], CExprP [Char])]
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paEmpty :: a -> [(Int, [Char])] -> PResult a
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 1 2 XX 3 _/\_ u0 -> \ (u1 :: u0) (u2 :: [(Int, [Char])]) -> _!_ _ORIG_ BaseDefs POk [u0] [u1, u2] _N_ #-}
paExpr :: [(Int, [Char])] -> PResult (CExprP [Char])
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ #-}
paExpr1 :: [(Int, [Char])] -> PResult (CExprP [Char])
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ #-}
paExpr1c :: [(Int, [Char])] -> PResult PartialExpr
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paExpr2 :: [(Int, [Char])] -> PResult (CExprP [Char])
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ #-}
paExpr2c :: [(Int, [Char])] -> PResult PartialExpr
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paExpr3 :: [(Int, [Char])] -> PResult (CExprP [Char])
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ #-}
paExpr3c :: [(Int, [Char])] -> PResult PartialExpr
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paExpr4 :: [(Int, [Char])] -> PResult (CExprP [Char])
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ #-}
paExpr4c :: [(Int, [Char])] -> PResult PartialExpr
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paExpr5 :: [(Int, [Char])] -> PResult (CExprP [Char])
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ #-}
paExpr5c :: [(Int, [Char])] -> PResult PartialExpr
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paExpr6 :: [(Int, [Char])] -> PResult (CExprP [Char])
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paFailed :: PResult a -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _F_ _IF_ARGS_ 1 1 C 4 _/\_ u0 -> \ (u1 :: PResult u0) -> case u1 of { _ALG_ _ORIG_ BaseDefs PFail (u2 :: [(Int, [Char])]) -> _!_ True [] []; _ORIG_ BaseDefs POk (u3 :: u0) (u4 :: [(Int, [Char])]) -> _!_ False [] []; _NO_DEFLT_ } _N_ #-}
paGetItem :: PResult a -> a
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
paGetRest :: PResult a -> [(Int, [Char])]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _F_ _IF_ARGS_ 1 1 C 4 _/\_ u0 -> \ (u1 :: PResult u0) -> case u1 of { _ALG_ _ORIG_ BaseDefs POk (u2 :: u0) (u3 :: [(Int, [Char])]) -> u3; _ORIG_ BaseDefs PFail (u4 :: [(Int, [Char])]) -> u4; _NO_DEFLT_ } _N_ #-}
paIsCname :: [Char] -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_ #-}
paIsName :: [Char] -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_ #-}
paIsNum :: [Char] -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
paIsRelop :: [Char] -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_ #-}
paKeywords :: [[Char]]
	{-# GHC_PRAGMA _A_ 0 _N_ _N_ _N_ _N_ _N_ #-}
paLambda :: [(Int, [Char])] -> PResult (CExprP [Char])
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paLet :: [(Int, [Char])] -> PResult (CExprP [Char])
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paLetrec :: [(Int, [Char])] -> PResult (CExprP [Char])
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paLex :: Int -> [Char] -> [(Int, [Char])]
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "LS" _N_ _N_ #-}
paLit :: [Char] -> [(Int, [Char])] -> PResult [Char]
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "LS" _N_ _N_ #-}
paName :: [(Int, [Char])] -> PResult [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 2 _APP_  _ORIG_ Parser2 paSat [ _ORIG_ Parser2 paIsName ] _N_ #-}
paNum :: [(Int, [Char])] -> PResult Int
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paNumval :: [Char] -> Int
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
paOneOrMore :: ([(Int, [Char])] -> PResult a) -> [(Int, [Char])] -> PResult [a]
	{-# GHC_PRAGMA _A_ 1 _U_ 22 _N_ _S_ "S" _N_ _N_ #-}
paOneOrMoreWithSep :: ([(Int, [Char])] -> PResult b) -> ([(Int, [Char])] -> PResult a) -> [(Int, [Char])] -> PResult [b]
	{-# GHC_PRAGMA _A_ 3 _U_ 222 _N_ _S_ "SLL" _N_ _N_ #-}
paParse :: [Char] -> ([(Bool, [[Char]])], ([([Char], [[Char]], [([Char], [TDefExpr])])], CExprP [Char]))
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _N_ _N_ _N_ #-}
paProgram :: [(Int, [Char])] -> PResult ([([Char], [[Char]], [([Char], [TDefExpr])])], [([Char], ([[Char]], CExprP [Char]))])
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paProgramToAtomic :: ([([Char], [[Char]], [([Char], [TDefExpr])])], [([Char], ([[Char]], CExprP [Char]))]) -> ([([Char], [[Char]], [([Char], [TDefExpr])])], CExprP [Char])
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(LL)" {_A_ 2 _U_ 21 _N_ _N_ _N_ _N_} _N_ _N_ #-}
paRelop :: [(Int, [Char])] -> PResult [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 2 _APP_  _ORIG_ Parser2 paSat [ _ORIG_ Parser2 paIsRelop ] _N_ #-}
paRelops :: [[Char]]
	{-# GHC_PRAGMA _A_ 0 _N_ _N_ _N_ _N_ _N_ #-}
paSat :: ([Char] -> Bool) -> [(Int, [Char])] -> PResult [Char]
	{-# GHC_PRAGMA _A_ 2 _U_ 12 _N_ _S_ "LS" _N_ _N_ #-}
paSc :: [(Int, [Char])] -> PResult ([Char], ([[Char]], CExprP [Char]))
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paScdefs :: [(Int, [Char])] -> PResult [([Char], ([[Char]], CExprP [Char]))]
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paSyntax :: [(Int, [Char])] -> ([([Char], [[Char]], [([Char], [TDefExpr])])], [([Char], ([[Char]], CExprP [Char]))])
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ #-}
paTDefExpr :: [(Int, [Char])] -> PResult TDefExpr
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paThen2 :: (a -> b -> c) -> ([(Int, [Char])] -> PResult a) -> ([(Int, [Char])] -> PResult b) -> [(Int, [Char])] -> PResult c
	{-# GHC_PRAGMA _A_ 4 _U_ 1112 _N_ _S_ "LSLL" _N_ _N_ #-}
paThen3 :: (a -> b -> c -> d) -> ([(Int, [Char])] -> PResult a) -> ([(Int, [Char])] -> PResult b) -> ([(Int, [Char])] -> PResult c) -> [(Int, [Char])] -> PResult d
	{-# GHC_PRAGMA _A_ 5 _U_ 11112 _N_ _S_ "LSLLL" _N_ _N_ #-}
paThen4 :: (a -> b -> c -> d -> e) -> ([(Int, [Char])] -> PResult a) -> ([(Int, [Char])] -> PResult b) -> ([(Int, [Char])] -> PResult c) -> ([(Int, [Char])] -> PResult d) -> [(Int, [Char])] -> PResult e
	{-# GHC_PRAGMA _A_ 6 _U_ 111112 _N_ _S_ "LSLLLL" _N_ _N_ #-}
paTypeDef :: [(Int, [Char])] -> PResult ([Char], [[Char]], [([Char], [TDefExpr])])
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paTypeDefList :: [(Int, [Char])] -> PResult [([Char], [[Char]], [([Char], [TDefExpr])])]
	{-# GHC_PRAGMA _A_ 0 _U_ 2 _N_ _N_ _N_ _N_ #-}
paValidTypeDefs :: [([Char], [[Char]], [([Char], [TDefExpr])])] -> [(Bool, [[Char]])] -> [Char]
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "SL" _N_ _N_ #-}
paWithTrailingSemi :: ([(Int, [Char])] -> PResult a) -> [(Int, [Char])] -> PResult a
	{-# GHC_PRAGMA _A_ 0 _U_ 12 _N_ _N_ _N_ _N_ #-}
paZeroOrMore :: ([(Int, [Char])] -> PResult a) -> [(Int, [Char])] -> PResult [a]
	{-# GHC_PRAGMA _A_ 2 _U_ 22 _N_ _S_ "SL" _N_ _N_ #-}

