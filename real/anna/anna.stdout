
Jules's Strictness Analyser, version 0.400
Copyright (c) Julian Seward 1992
Read 9 lattice sizes.


=============
=== Input ===
=============

day  ::= Monday  |
         Tuesday  |
         Wednesday  |
         Thursday  |
         Friday  |
         Saturday  |
         Sunday ;


domain  ::= Unit  |
            Lift (domain );


pair a b ::= Pair a b;


list a ::= Nil  |
           Cons a (list a);


tree a ::= Leaf  |
           Branch (tree a) a (tree a);


assoc a b ::= NilAssoc  |
              Assoc a b (assoc a b);

;;

letrec
  _bottomAny = \ -> _bottomAny
in letrec
  _append = \x y -> case x of
                      Nil  -> y;
                      Cons a as -> Cons a (_append as y)
                    end
in letrec
  _bigs = \d l2 -> case l2 of
                     Nil  -> Nil;
                     Cons l2x l2xs -> case _> l2x d of
                                        True  -> Cons l2x (_bigs d l2xs);
                                        False  -> _bigs d l2xs
                                      end
                   end
in letrec
  _smalls = \d l2 -> case l2 of
                       Nil  -> Nil;
                       Cons l2x l2xs -> case _<= l2x d of
                                          True  -> Cons l2x (_smalls d l2xs);
                                          False  -> _smalls d l2xs
                                        end
                     end
in letrec
  _qsort = \l -> case l of
                   Nil  -> Nil;
                   Cons h t -> _append (_qsort (_smalls h t)) (Cons h (_qsort (_bigs h t)))
                 end
in letrec
  _domainHeight = \d -> case d of
                          Unit  -> 1;
                          Lift d1 -> _+ 1 (_domainHeight d1)
                        end
in let
  _workingHours = \d -> case d of
                          Saturday  -> 0;
                          Sunday  -> 0;
                          Monday  -> 2;
                          Tuesday  -> 4;
                          Wednesday  -> 5;
                          Thursday  -> 3;
                          Friday  -> 1
                        end
in let
  _incHead = \l -> case l of
                     Nil  -> Nil;
                     Cons a as -> Cons (_+ a 1) as
                   end
in letrec
  _tricky = \a b -> case _== a 0 of
                      True  -> b;
                      False  -> _tricky (_- a 1) b
                    end
in letrec
  _length = \x -> case x of
                    Nil  -> 0;
                    Cons a as -> _+ 1 (_length as)
                  end
in letrec
  _sum = \x -> case x of
                 Nil  -> 0;
                 Cons a as -> _+ a (_sum as)
               end
in letrec
  _rev = \x -> case x of
                 Nil  -> Nil;
                 Cons a as -> _append (_rev as) (Cons a Nil)
               end
in letrec
  _take = \n l -> case l of
                    Nil  -> Nil;
                    Cons x xs -> case _== n 0 of
                                   True  -> Nil;
                                   False  -> Cons x (_take (_- n 1) xs)
                                 end
                  end
in letrec
  _drop = \n l -> case l of
                    Nil  -> Nil;
                    Cons x xs -> case _== n 0 of
                                   True  -> Cons x xs;
                                   False  -> _drop (_- n 1) xs
                                 end
                  end
in let
  _first = \p -> case p of
                   Pair a b -> a
                 end
in let
  _second = \p -> case p of
                    Pair a b -> b
                  end
in letrec
  _mirror = \t -> case t of
                    Leaf  -> Leaf;
                    Branch l x r -> Branch (_mirror r) x (_mirror l)
                  end
in letrec
  _sumt = \t -> case t of
                  Leaf  -> 0;
                  Branch l x r -> _+ (_sumt l) (_+ x (_sumt r))
                end
in letrec
  _aLookupDef = \al key default -> case al of
                                     NilAssoc  -> default;
                                     Assoc a b abs -> case _== a key of
                                                        True  -> b;
                                                        False  -> _aLookupDef abs key default
                                                      end
                                   end
in letrec
  _aDomain = \al -> case al of
                      NilAssoc  -> Nil;
                      Assoc a b abs -> Cons a (_aDomain abs)
                    end
in letrec
  _aInverse = \al -> case al of
                       NilAssoc  -> NilAssoc;
                       Assoc a b abs -> Assoc b a (_aInverse abs)
                     end
in letrec
  _flatten = \t -> case t of
                     Leaf  -> Nil;
                     Branch l x r -> _append (_flatten l) (Cons x (_flatten r))
                   end
in letrec
  _insert = \x t -> case t of
                      Leaf  -> Branch Leaf x Leaf;
                      Branch l x1 r -> case _== x x1 of
                                         True  -> Branch l x1 r;
                                         False  -> case _< x x1 of
                                                     True  -> Branch (_insert x l) x1 r;
                                                     False  -> Branch l x1 (_insert x r)
                                                   end
                                       end
                    end
in letrec
  _ltt = \tr li -> case li of
                     Nil  -> tr;
                     Cons x xs -> _ltt (_insert x tr) xs
                   end
in let
  _listToTree = \l -> _ltt Leaf l
in let
  _nodups = \l -> _flatten (_listToTree l)
in 42


=============
=== Types ===
=============

   _bottomAny ::             a
   _append ::                (list a) ->  (list a) ->  (list a)
   _bigs ::                  int ->  (list int) ->  (list int)
   _smalls ::                int ->  (list int) ->  (list int)
   _qsort ::                 (list int) ->  (list int)
   _domainHeight ::          (domain) ->  int
   _workingHours ::          (day) ->  int
   _incHead ::               (list int) ->  (list int)
   _tricky ::                int ->  a ->  a
   _length ::                (list a) ->  int
   _sum ::                   (list int) ->  int
   _rev ::                   (list a) ->  (list a)
   _take ::                  int ->  (list a) ->  (list a)
   _drop ::                  int ->  (list a) ->  (list a)
   _first ::                 (pair a b) ->  a
   _second ::                (pair a b) ->  b
   _mirror ::                (tree a) ->  (tree a)
   _sumt ::                  (tree int) ->  int
   _aLookupDef ::            (assoc int a) ->  int ->  a ->  a
   _aDomain ::               (assoc a b) ->  (list a)
   _aInverse ::              (assoc a b) ->  (assoc b a)
   _flatten ::               (tree a) ->  (list a)
   _insert ::                int ->  (tree int) ->  (tree int)
   _ltt ::                   (tree int) ->  (list int) ->  (tree int)
   _listToTree ::            (list int) ->  (tree int)
   _nodups ::                (list int) ->  (list int)
   Monday ::                 (day)
   Tuesday ::                (day)
   Wednesday ::              (day)
   Thursday ::               (day)
   Friday ::                 (day)
   Saturday ::               (day)
   Sunday ::                 (day)
   Unit ::                   (domain)
   Lift ::                   (domain) ->  (domain)
   Pair ::                   a ->  b ->  (pair a b)
   Nil ::                    (list a)
   Cons ::                   a ->  (list a) ->  (list a)
   Leaf ::                   (tree a)
   Branch ::                 (tree a) ->  a ->  (tree a) ->  (tree a)
   NilAssoc ::               (assoc a b)
   Assoc ::                  a ->  b ->  (assoc a b) ->  (assoc a b)
   True ::                   bool
   False ::                  bool


================
=== Settings ===
================

Scaleup ratio = 20/10
Lower lattice size limit = 0
Upper lattice size limit = 1000000
Polymorphic generalisation limit = 10000


==================
=== Strictness ===
==================

Function "_bottomAny" is a constant point 0 in domain 
    {0 1}


Domains for "_append" are
       4   [Two, Two]
       8   [Lift2 [Two], Two]
      16   [Lift2 [Two], Lift2 [Two]]

Evaluated at size       4 using    7 evals live "_append"
Evaluated at size       4 using    7 evals live "_append"
Evaluated at size       4 using    7 evals safe "_append"
Evaluated at size       8 using    3 evals live "_append"
Evaluated at size       8 using    2 evals live "_append"
Evaluated at size       8 using    2 evals safe "_append"
Evaluated at size      16 using    4 evals live "_append"
Evaluated at size      16 using    4 evals live "_append"
Evaluated at size      16 using    2 evals live "_append"
Evaluated at size      16 using    2 evals safe "_append"

Function "_append" has input domains:
   1) {0 1 2 3}
   2) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3 3
       2   |  2 2
       1   |  1 0
       0   |  0 0



Domains for "_bigs" are
       4   [Two, Two]
       8   [Two, Lift2 [Two]]

Evaluated at size       4 using    6 evals live "_bigs"
Evaluated at size       4 using    6 evals live "_bigs"
Evaluated at size       4 using    6 evals safe "_bigs"
Evaluated at size       8 using    5 evals live "_bigs"
Evaluated at size       8 using    3 evals live "_bigs"
Evaluated at size       8 using    3 evals safe "_bigs"

Function "_bigs" has input domains:
   1) {0 1}
   2) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  0 3
       2   |  
       1   |  1 1
       0   |  0 0



Domains for "_smalls" are
       4   [Two, Two]
       8   [Two, Lift2 [Two]]

Evaluated at size       4 using    6 evals live "_smalls"
Evaluated at size       4 using    6 evals live "_smalls"
Evaluated at size       4 using    6 evals safe "_smalls"
Evaluated at size       8 using    5 evals live "_smalls"
Evaluated at size       8 using    3 evals live "_smalls"
Evaluated at size       8 using    3 evals safe "_smalls"

Function "_smalls" has input domains:
   1) {0 1}
   2) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  0 3
       2   |  
       1   |  1 1
       0   |  0 0



Domains for "_qsort" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals live "_qsort"
Evaluated at size       2 using    4 evals live "_qsort"
Evaluated at size       2 using    4 evals safe "_qsort"
Evaluated at size       4 using    3 evals live "_qsort"
Evaluated at size       4 using    3 evals live "_qsort"
Evaluated at size       4 using    3 evals safe "_qsort"

Function "_qsort" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3
       2   |  2
       1   |  
       0   |  0



Domains for "_domainHeight" are
       2   [Two]
       3   [Lift1 [Two]]

Evaluated at size       2 using    2 evals live "_domainHeight"
Evaluated at size       2 using    2 evals live "_domainHeight"
Evaluated at size       2 using    2 evals safe "_domainHeight"
Evaluated at size       3 using    1 evals live "_domainHeight"
Evaluated at size       3 using    1 evals safe "_domainHeight"

Function "_domainHeight" has input domains:
   1) {0 1 2}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  2
       0   |  0



Domains for "_workingHours" are
       2   [Two]

Evaluated at size       2 using    2 evals safe "_workingHours"
Evaluated at size       2 using    2 evals live "_workingHours"

Function "_workingHours" has input domains:
   1) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1
       0   |  0



Domains for "_incHead" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals safe "_incHead"
Evaluated at size       2 using    4 evals live "_incHead"
Evaluated at size       4 using    2 evals safe "_incHead"
Evaluated at size       4 using    2 evals live "_incHead"

Function "_incHead" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3
       2   |  2
       1   |  1
       0   |  0



Domains for "_tricky" are
       4   [Two, Two]

Evaluated at size       4 using    4 evals live "_tricky"
Evaluated at size       4 using    4 evals live "_tricky"
Evaluated at size       4 using    4 evals safe "_tricky"

Function "_tricky" has input domains:
   1) {0 1}
   2) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  1 1
       0   |  0 0



Domains for "_length" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    2 evals live "_length"
Evaluated at size       2 using    2 evals live "_length"
Evaluated at size       2 using    2 evals safe "_length"
Evaluated at size       4 using    2 evals live "_length"
Evaluated at size       4 using    1 evals live "_length"
Evaluated at size       4 using    1 evals safe "_length"

Function "_length" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  2
       0   |  0



Domains for "_sum" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    2 evals live "_sum"
Evaluated at size       2 using    2 evals live "_sum"
Evaluated at size       2 using    2 evals safe "_sum"
Evaluated at size       4 using    1 evals live "_sum"
Evaluated at size       4 using    1 evals safe "_sum"

Function "_sum" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  3
       0   |  0



Domains for "_rev" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals live "_rev"
Evaluated at size       2 using    4 evals live "_rev"
Evaluated at size       2 using    4 evals safe "_rev"
Evaluated at size       4 using    3 evals live "_rev"
Evaluated at size       4 using    3 evals live "_rev"
Evaluated at size       4 using    3 evals safe "_rev"

Function "_rev" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3
       2   |  2
       1   |  
       0   |  0



Domains for "_take" are
       4   [Two, Two]
       8   [Two, Lift2 [Two]]

Evaluated at size       4 using    6 evals live "_take"
Evaluated at size       4 using    6 evals live "_take"
Evaluated at size       4 using    6 evals safe "_take"
Evaluated at size       8 using    6 evals live "_take"
Evaluated at size       8 using    3 evals live "_take"
Evaluated at size       8 using    3 evals safe "_take"

Function "_take" has input domains:
   1) {0 1}
   2) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  0 3 and 1 1
       2   |  
       1   |  
       0   |  0 0



Domains for "_drop" are
       4   [Two, Two]
       8   [Two, Lift2 [Two]]

Evaluated at size       4 using    6 evals live "_drop"
Evaluated at size       4 using    6 evals live "_drop"
Evaluated at size       4 using    6 evals safe "_drop"
Evaluated at size       8 using    7 evals live "_drop"
Evaluated at size       8 using    5 evals live "_drop"
Evaluated at size       8 using    5 evals safe "_drop"

Function "_drop" has input domains:
   1) {0 1}
   2) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  0 3 and 1 2
       2   |  
       1   |  1 1
       0   |  0 0



Domains for "_first" are
       2   [Two]
       5   [Lift1 [Two, Two]]

Evaluated at size       2 using    2 evals safe "_first"
Evaluated at size       2 using    2 evals live "_first"
Evaluated at size       5 using    2 evals safe "_first"
Evaluated at size       5 using    2 evals live "_first"

Function "_first" has input domains:
   1) {00 11 12 21 22}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  21
       0   |  00



Domains for "_second" are
       2   [Two]
       5   [Lift1 [Two, Two]]

Evaluated at size       2 using    2 evals safe "_second"
Evaluated at size       2 using    2 evals live "_second"
Evaluated at size       5 using    3 evals safe "_second"
Evaluated at size       5 using    3 evals live "_second"

Function "_second" has input domains:
   1) {00 11 12 21 22}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  12
       0   |  00



Domains for "_mirror" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals live "_mirror"
Evaluated at size       2 using    4 evals live "_mirror"
Evaluated at size       2 using    4 evals safe "_mirror"
Evaluated at size       4 using    2 evals live "_mirror"
Evaluated at size       4 using    2 evals live "_mirror"
Evaluated at size       4 using    2 evals safe "_mirror"

Function "_mirror" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3
       2   |  2
       1   |  1
       0   |  0



Domains for "_sumt" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    2 evals live "_sumt"
Evaluated at size       2 using    2 evals live "_sumt"
Evaluated at size       2 using    2 evals safe "_sumt"
Evaluated at size       4 using    1 evals live "_sumt"
Evaluated at size       4 using    1 evals safe "_sumt"

Function "_sumt" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  3
       0   |  0



Domains for "_aLookupDef" are
       8   [Two, Two, Two]
      24   [Lift2 [Two, Two], Two, Two]

Evaluated at size       8 using    6 evals live "_aLookupDef"
Evaluated at size       8 using    6 evals live "_aLookupDef"
Evaluated at size       8 using    6 evals safe "_aLookupDef"
Evaluated at size      24 using    5 evals live "_aLookupDef"
Evaluated at size      24 using    2 evals live "_aLookupDef"
Evaluated at size      24 using    2 evals safe "_aLookupDef"

Function "_aLookupDef" has input domains:
   1) {00 11 22 23 32 33}
   2) {0 1}
   3) {0 1}
   and output domain
      {0 1}

   Output  |  Lower frontier
   --------+----------------
       1   |  11 1 0 and 33 0 1
       0   |  00 0 0



Domains for "_aDomain" are
       2   [Two]
       6   [Lift2 [Two, Two]]

Evaluated at size       2 using    4 evals live "_aDomain"
Evaluated at size       2 using    4 evals live "_aDomain"
Evaluated at size       2 using    4 evals safe "_aDomain"
Evaluated at size       6 using    4 evals live "_aDomain"
Evaluated at size       6 using    2 evals live "_aDomain"
Evaluated at size       6 using    2 evals safe "_aDomain"

Function "_aDomain" has input domains:
   1) {00 11 22 23 32 33}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  32
       2   |  22
       1   |  11
       0   |  00



Domains for "_aInverse" are
       2   [Two]
       6   [Lift2 [Two, Two]]

Evaluated at size       2 using    4 evals live "_aInverse"
Evaluated at size       2 using    4 evals live "_aInverse"
Evaluated at size       2 using    4 evals safe "_aInverse"
Evaluated at size       6 using    4 evals live "_aInverse"
Evaluated at size       6 using    3 evals live "_aInverse"
Evaluated at size       6 using    3 evals safe "_aInverse"

Function "_aInverse" has input domains:
   1) {00 11 22 23 32 33}
   and output domain
      {00 11 22 23 32 33}

   Output  |  Lower frontier
   --------+----------------
      33   |  33
      32   |  23
      23   |  32
      22   |  22
      11   |  11
      00   |  00



Domains for "_flatten" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals live "_flatten"
Evaluated at size       2 using    4 evals live "_flatten"
Evaluated at size       2 using    4 evals safe "_flatten"
Evaluated at size       4 using    2 evals live "_flatten"
Evaluated at size       4 using    2 evals live "_flatten"
Evaluated at size       4 using    2 evals safe "_flatten"

Function "_flatten" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3
       2   |  2
       1   |  1
       0   |  0



Domains for "_insert" are
       4   [Two, Two]
       8   [Two, Lift2 [Two]]

Evaluated at size       4 using    6 evals live "_insert"
Evaluated at size       4 using    6 evals live "_insert"
Evaluated at size       4 using    6 evals safe "_insert"
Evaluated at size       8 using    5 evals live "_insert"
Evaluated at size       8 using    4 evals live "_insert"
Evaluated at size       8 using    4 evals safe "_insert"

Function "_insert" has input domains:
   1) {0 1}
   2) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  1 3
       2   |  0 3 and 1 2
       1   |  1 1
       0   |  0 0



Domains for "_ltt" are
       4   [Two, Two]
       8   [Lift2 [Two], Two]
      16   [Lift2 [Two], Lift2 [Two]]

Evaluated at size       4 using    8 evals live "_ltt"
Evaluated at size       4 using    8 evals live "_ltt"
Evaluated at size       4 using    8 evals safe "_ltt"
Evaluated at size       8 using    2 evals live "_ltt"
Evaluated at size       8 using    2 evals live "_ltt"
Evaluated at size       8 using    2 evals safe "_ltt"
Evaluated at size      16 using    6 evals live "_ltt"
Evaluated at size      16 using    5 evals live "_ltt"
Evaluated at size      16 using    5 evals safe "_ltt"

Function "_ltt" has input domains:
   1) {0 1 2 3}
   2) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3 3
       2   |  2 3 and 3 2
       1   |  1 3
       0   |  0 0



Domains for "_listToTree" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals safe "_listToTree"
Evaluated at size       2 using    4 evals live "_listToTree"
Evaluated at size       4 using    3 evals safe "_listToTree"
Evaluated at size       4 using    3 evals live "_listToTree"

Function "_listToTree" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3
       2   |  2
       1   |  
       0   |  0



Domains for "_nodups" are
       2   [Two]
       4   [Lift2 [Two]]

Evaluated at size       2 using    4 evals safe "_nodups"
Evaluated at size       2 using    4 evals live "_nodups"
Evaluated at size       4 using    3 evals safe "_nodups"
Evaluated at size       4 using    3 evals live "_nodups"

Function "_nodups" has input domains:
   1) {0 1 2 3}
   and output domain
      {0 1 2 3}

   Output  |  Lower frontier
   --------+----------------
       3   |  3
       2   |  2
       1   |  
       0   |  0



