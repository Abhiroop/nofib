{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface MyUtils where
infixl 9 ##
(##) :: [a] -> Int -> a
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "SU(P)" {_A_ 2 _U_ 12 _N_ _N_ _N_ _N_} _N_ _N_ #-}
fail :: [Char] -> a
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ _!_ _N_ _N_ #-}
myAll :: (a -> Bool) -> [a] -> Bool
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "LS" _N_ _N_ #-}
myAnd :: [Bool] -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
myAndWith2 :: (a -> b -> Bool) -> [a] -> [b] -> Bool
	{-# GHC_PRAGMA _A_ 3 _U_ 211 _N_ _S_ "LSS" _N_ _N_ #-}
myAny :: (a -> Bool) -> [a] -> Bool
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "LS" _N_ _N_ #-}
myCartesianProduct :: [[a]] -> [[a]]
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _S_ "S" _N_ _N_ #-}
myDrop :: Int -> [a] -> [a]
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(P)S" {_A_ 2 _U_ 21 _N_ _N_ _N_ _N_} _N_ _N_ #-}
myIntsFrom :: Int -> [Int]
	{-# GHC_PRAGMA _A_ 1 _U_ 2 _N_ _N_ _N_ _N_ #-}
myIntsFromTo :: Int -> Int -> [Int]
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(P)U(P)" {_A_ 2 _U_ 22 _N_ _N_ _N_ _N_} _N_ _N_ #-}
myListVariants :: [a] -> [[a]] -> [[a]]
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "SS" _N_ _N_ #-}
myOr :: [Bool] -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
mySeq :: Eq a => a -> b -> b
	{-# GHC_PRAGMA _A_ 3 _U_ 121 _N_ _S_ "U(SA)LS" {_A_ 3 _U_ 121 _N_ _N_ _N_ _N_} _N_ _N_ #-}
mySubtract :: Int -> Int -> Int
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(P)U(P)" {_A_ 2 _U_ 22 _N_ _N_ _F_ _IF_ARGS_ 0 2 XX 3 \ (u0 :: Int#) (u1 :: Int#) -> case _#_ minusInt# [] [u1, u0] of { _PRIM_ (u2 :: Int#) -> _!_ I# [] [u2] } _N_} _F_ _IF_ARGS_ 0 2 CC 5 \ (u0 :: Int) (u1 :: Int) -> case u1 of { _ALG_ I# (u2 :: Int#) -> case u0 of { _ALG_ I# (u3 :: Int#) -> case _#_ minusInt# [] [u2, u3] of { _PRIM_ (u4 :: Int#) -> _!_ I# [] [u4] }; _NO_DEFLT_ }; _NO_DEFLT_ } _N_ #-}
myTake :: Int -> [a] -> [a]
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "U(P)L" {_A_ 2 _U_ 21 _N_ _N_ _N_ _N_} _N_ _N_ #-}
myZip2 :: [a] -> [b] -> [(a, b)]
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _N_ _N_ _N_ #-}
myZip3 :: [a] -> [b] -> [c] -> [(a, b, c)]
	{-# GHC_PRAGMA _A_ 3 _U_ 111 _N_ _N_ _N_ _N_ #-}
myZip4 :: [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]
	{-# GHC_PRAGMA _A_ 4 _U_ 1111 _N_ _N_ _N_ _N_ #-}
myZip5 :: [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]
	{-# GHC_PRAGMA _A_ 5 _U_ 11111 _N_ _N_ _N_ _N_ #-}
myZipWith2 :: (a -> b -> c) -> [a] -> [b] -> [c]
	{-# GHC_PRAGMA _A_ 3 _U_ 211 _N_ _S_ "LSS" _N_ _N_ #-}
myZipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]
	{-# GHC_PRAGMA _A_ 4 _U_ 2111 _N_ _S_ "LSSS" _N_ _N_ #-}
myZipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c] -> [d] -> [e]
	{-# GHC_PRAGMA _A_ 5 _U_ 21111 _N_ _S_ "LSSSS" _N_ _N_ #-}
myZipWith5 :: (a -> b -> c -> d -> e -> f) -> [a] -> [b] -> [c] -> [d] -> [e] -> [f]
	{-# GHC_PRAGMA _A_ 6 _U_ 211111 _N_ _S_ "LSSSSS" _N_ _N_ #-}
panic :: [Char] -> a
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ _!_ _N_ _N_ #-}

