{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Getops where
import Type_defs(Maybe)
import Vtslib(Option)
data ArgType   = Flag | Arg
gen_pattern :: [Char] -> [(Char, ArgType)]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
getops :: [Char] -> [[Char]] -> Maybe ([(Char, Option [Char])], [[Char]]) [Char]
	{-# GHC_PRAGMA _A_ 2 _U_ 00 _N_ _S_ "AA" {_A_ 0 _N_ _N_ _N_ _N_ _N_} _N_ _N_ #-}
is_option :: [Char] -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _F_ _IF_ARGS_ 0 1 C 6 \ (u0 :: [Char]) -> case u0 of { _ALG_ _NIL_  -> _!_ False [] []; (:) (u1 :: Char) (u2 :: [Char]) -> case u1 of { _ALG_ C# (u3 :: Char#) -> case u3 of { _PRIM_ '\o55'# -> _!_ True [] []; (u4 :: Char#) -> _!_ False [] [] }; _NO_DEFLT_ }; _NO_DEFLT_ } _N_ #-}
process_flags :: [(Char, ArgType)] -> [[Char]] -> Maybe ([(Char, Option [Char])], [[Char]]) [Char]
	{-# GHC_PRAGMA _A_ 2 _U_ 02 _N_ _S_ "AS" {_A_ 1 _U_ 2 _N_ _N_ _N_ _N_} _N_ _N_ #-}
process_options :: [(Char, ArgType)] -> Bool -> [Char] -> [a] -> Maybe ([(Char, Option a)], [a]) [Char]
	{-# GHC_PRAGMA _A_ 4 _U_ 2122 _N_ _S_ "LLSL" _N_ _N_ #-}

