{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Tree where
import Type_defs(Maybe)
import Vtslib(Option)
data TREE a b c   = Tree a [TREE a b c] (Option b) (c -> TREE a b c -> TREE a b c) (Option (TREE a b c))
data Tree_state a b c   = TreeSt (TREE a b c) [(Int, TREE a b c)] c
down :: Int -> Tree_state a b c -> Tree_state a b c
	{-# GHC_PRAGMA _A_ 2 _U_ 21 _N_ _S_ "LU(U(LLLLL)LL)" {_A_ 4 _U_ 2222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
failtest :: a -> [Char] -> ([Char], [Int], [Int]) -> (([Char], [Int], [Int]), Maybe a [Char], [Char])
	{-# GHC_PRAGMA _A_ 2 _U_ 222 _N_ _N_ _N_ _N_ #-}
goto :: [Int] -> Tree_state a b c -> Tree_state a b c
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _S_ "SU(LLL)" {_A_ 4 _U_ 1222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
is_complete :: TREE a b c -> Bool
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(AASAA)" {_A_ 1 _U_ 1 _N_ _N_ _F_ _IF_ARGS_ 3 1 C 4 _/\_ u0 u1 u2 -> \ (u3 :: Option u1) -> case u3 of { _ALG_ _ORIG_ Vtslib NONE  -> _!_ False [] []; _ORIG_ Vtslib SOME (u4 :: u1) -> _!_ True [] []; _NO_DEFLT_ } _N_} _F_ _IF_ARGS_ 3 1 C 5 _/\_ u0 u1 u2 -> \ (u3 :: TREE u0 u1 u2) -> case u3 of { _ALG_ _ORIG_ Tree Tree (u4 :: u0) (u5 :: [TREE u0 u1 u2]) (u6 :: Option u1) (u7 :: u2 -> TREE u0 u1 u2 -> TREE u0 u1 u2) (u8 :: Option (TREE u0 u1 u2)) -> case u6 of { _ALG_ _ORIG_ Vtslib NONE  -> _!_ False [] []; _ORIG_ Vtslib SOME (u9 :: u1) -> _!_ True [] []; _NO_DEFLT_ }; _NO_DEFLT_ } _N_ #-}
lift_io_tree_fn :: (TREE a b c -> ([Char], [Int], [Int]) -> (([Char], [Int], [Int]), Maybe (TREE a b c) [Char], [Char])) -> Tree_state a b c -> ([Char], [Int], [Int]) -> (([Char], [Int], [Int]), Maybe (Tree_state a b c) [Char], [Char])
	{-# GHC_PRAGMA _A_ 2 _U_ 212 _N_ _S_ "SU(LLL)" {_A_ 4 _U_ 22222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
lift_io_tree_st_fn :: (d -> b -> (c, Maybe d a, [f])) -> d -> b -> (c, Maybe d e, [f])
	{-# GHC_PRAGMA _A_ 2 _U_ 122 _N_ _S_ "SL" _N_ _N_ #-}
lift_non_io_tree_fn :: (TREE a b c -> Maybe (TREE a b c) [Char]) -> Tree_state a b c -> ([Char], [Int], [Int]) -> (([Char], [Int], [Int]), Maybe (Tree_state a b c) [Char], [Char])
	{-# GHC_PRAGMA _A_ 2 _U_ 112 _N_ _S_ "SU(LLL)" {_A_ 4 _U_ 12222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
lift_non_io_tree_st_fn :: (a -> Maybe a [Char]) -> a -> ([Char], [Int], [Int]) -> (([Char], [Int], [Int]), Maybe a [Char], [Char])
	{-# GHC_PRAGMA _A_ 2 _U_ 122 _N_ _S_ "SL" _N_ _N_ #-}
mk_incomplete :: TREE a b c -> TREE a b c
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _N_ _N_ _N_ #-}
replace :: a -> Int -> [a] -> Maybe [a] [Char]
	{-# GHC_PRAGMA _A_ 3 _U_ 212 _N_ _N_ _N_ _N_ #-}
replace' :: [a] -> a -> Int -> [a] -> Maybe [a] [Char]
	{-# GHC_PRAGMA _A_ 4 _U_ 2212 _N_ _S_ "LLU(P)S" {_A_ 4 _U_ 2222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
search :: Num a => (TREE b c d -> Bool) -> Bool -> TREE b c d -> [([a], TREE b c d)]
	{-# GHC_PRAGMA _A_ 1 _U_ 2222 _N_ _N_ _N_ _N_ #-}
search_sub_tree :: Num a => (TREE b c d -> Bool) -> Bool -> [TREE b c d] -> a -> [a] -> [([a], TREE b c d)]
	{-# GHC_PRAGMA _A_ 1 _U_ 222222 _N_ _N_ _N_ _N_ #-}
search_tree :: Num a => (TREE b c d -> Bool) -> Bool -> TREE b c d -> [a] -> [([a], TREE b c d)]
	{-# GHC_PRAGMA _A_ 1 _U_ 22222 _N_ _N_ _N_ _N_ #-}
top :: Tree_state a b c -> Maybe (Tree_state a b c) [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(LSL)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}
tree_down :: Int -> Tree_state a b c -> ([Char], [Int], [Int]) -> (([Char], [Int], [Int]), Maybe (Tree_state a b c) [Char], [Char])
	{-# GHC_PRAGMA _A_ 1 _U_ 222 _N_ _N_ _N_ _N_ #-}
tree_goto :: [Int] -> Tree_state a b c -> Tree_state a b c
	{-# GHC_PRAGMA _A_ 2 _U_ 11 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ Tree goto _N_ #-}
tree_search :: Num a => (TREE b c d -> Bool) -> Bool -> TREE b c d -> [([a], TREE b c d)]
	{-# GHC_PRAGMA _A_ 1 _U_ 2222 _N_ _N_ _F_ _IF_ARGS_ 0 0 X 1 _ORIG_ Tree search _N_ #-}
tree_top :: Tree_state a b c -> ([Char], [Int], [Int]) -> (([Char], [Int], [Int]), Maybe (Tree_state a b c) [Char], [Char])
	{-# GHC_PRAGMA _A_ 1 _U_ 22 _N_ _N_ _N_ _N_ #-}
tree_undo :: Tree_state a b c -> ([Char], [Int], [Int]) -> (([Char], [Int], [Int]), Maybe (Tree_state a b c) [Char], [Char])
	{-# GHC_PRAGMA _A_ 1 _U_ 12 _N_ _N_ _N_ _N_ #-}
tree_up :: Tree_state a b c -> ([Char], [Int], [Int]) -> (([Char], [Int], [Int]), Maybe (Tree_state a b c) [Char], [Char])
	{-# GHC_PRAGMA _A_ 1 _U_ 22 _N_ _N_ _N_ _N_ #-}
undo :: TREE a b c -> TREE a b c
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(LLLLS)" {_A_ 5 _U_ 22222 _N_ _N_ _F_ _IF_ARGS_ 3 5 XXXXC 9 _/\_ u0 u1 u2 -> \ (u3 :: u0) (u4 :: [TREE u0 u1 u2]) (u5 :: Option u1) (u6 :: u2 -> TREE u0 u1 u2 -> TREE u0 u1 u2) (u7 :: Option (TREE u0 u1 u2)) -> case u7 of { _ALG_ _ORIG_ Vtslib SOME (u8 :: TREE u0 u1 u2) -> u8; _ORIG_ Vtslib NONE  -> _!_ _ORIG_ Tree Tree [u0, u1, u2] [u3, u4, u5, u6, u7]; _NO_DEFLT_ } _N_} _N_ _N_ #-}
up :: Tree_state a b c -> Maybe (Tree_state a b c) [Char]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "U(LSL)" {_A_ 3 _U_ 222 _N_ _N_ _N_ _N_} _N_ _N_ #-}

