{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Type_defs where
import Core_datatype(Binder_conn)
data Maybe a b   = Ok a | Bad b
data Token   = Rvd [Char] | Clr [Char] | Bdr Binder_conn | IfxBdr [Char] | IfxOp [Char] | Scan_Err [Char]
instance (Eq a, Eq b) => Eq (Maybe a b)
	{-# GHC_PRAGMA _M_ Type_defs {-dfun-} _A_ 2 _U_ 11 _N_ _N_ _N_ _N_ #-}
instance Eq Token
	{-# GHC_PRAGMA _M_ Type_defs {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 3 _!_ _TUP_2 [(Token -> Token -> Bool), (Token -> Token -> Bool)] [_CONSTM_ Eq (==) (Token), _CONSTM_ Eq (/=) (Token)] _N_
	 (==) = _A_ 2 _U_ 11 _N_ _S_ "SS" _N_ _N_,
	 (/=) = _A_ 2 _U_ 11 _N_ _S_ "SS" _N_ _N_ #-}
instance Text Token
	{-# GHC_PRAGMA _M_ Type_defs {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 5 _!_ _TUP_4 [(Int -> [Char] -> [(Token, [Char])]), (Int -> Token -> [Char] -> [Char]), ([Char] -> [([Token], [Char])]), ([Token] -> [Char] -> [Char])] [_CONSTM_ Text readsPrec (Token), _CONSTM_ Text showsPrec (Token), _CONSTM_ Text readList (Token), _CONSTM_ Text showList (Token)] _N_
	 readsPrec = _A_ 2 _U_ 22 _N_ _S_ _!_ _F_ _IF_ARGS_ 0 2 XX 4 \ (u0 :: Int) (u1 :: [Char]) -> _APP_  _TYAPP_  patError# { (Int -> [Char] -> [(Token, [Char])]) } [ _NOREP_S_ "%DPreludeCore.Text.readsPrec\"", u0, u1 ] _N_,
	 showsPrec = _A_ 3 _U_ 222 _N_ _S_ _!_ _F_ _IF_ARGS_ 0 3 XXX 5 \ (u0 :: Int) (u1 :: Token) (u2 :: [Char]) -> _APP_  _TYAPP_  patError# { (Int -> Token -> [Char] -> [Char]) } [ _NOREP_S_ "%DPreludeCore.Text.showsPrec\"", u0, u1, u2 ] _N_,
	 readList = _A_ 0 _U_ 2 _N_ _N_ _N_ _N_,
	 showList = _A_ 0 _U_ 12 _N_ _N_ _N_ _N_ #-}

