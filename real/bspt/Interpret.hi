{-# GHC_PRAGMA INTERFACE VERSION 5 #-}
interface Interpret where
import Euclid(Point)
import Params(Command)
data Command 	{-# GHC_PRAGMA Polygon | Union | Intersect | Subtract | Complement | Partition | Render | Classify | Area | Quit | Null #-}
type Operation = (Command, [Point])
type Operations = [(Command, [Point])]
interpret :: [[Char]] -> [(Command, [Point])]
	{-# GHC_PRAGMA _A_ 1 _U_ 1 _N_ _S_ "S" _N_ _N_ #-}
instance Eq Command
	{-# GHC_PRAGMA _M_ Params {-dfun-} _A_ 0 _N_ _N_ _N_ _F_ _IF_ARGS_ 0 0 X 3 _!_ _TUP_2 [(Command -> Command -> Bool), (Command -> Command -> Bool)] [_CONSTM_ Eq (==) (Command), _CONSTM_ Eq (/=) (Command)] _N_
	 (==) = _A_ 2 _U_ 11 _N_ _S_ "EE" _N_ _N_,
	 (/=) = _A_ 2 _U_ 11 _N_ _S_ "EE" _N_ _N_ #-}

